import{_ as t,p as e,q as n,Z as a}from"./framework-47a2e622.js";const r={},s=a(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

string <span class="token operator">=</span> <span class="token string">&#39;abcdefg&#39;</span>
ex <span class="token operator">=</span> <span class="token string">r&#39;\\w{2}&#39;</span>
text <span class="token operator">=</span> re<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment"># 返回一个列表</span>
</code></pre></div><h2 id="表达式修饰符" tabindex="-1"><a class="header-anchor" href="#表达式修饰符" aria-hidden="true">#</a> 表达式修饰符</h2><table><thead><tr><th style="text-align:center;">修饰符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">re.I</td><td style="text-align:center;">使匹配对大小写不敏感</td></tr><tr><td style="text-align:center;">re.L</td><td style="text-align:center;">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center;">re.M</td><td style="text-align:center;">多行匹配，影响^和$</td></tr><tr><td style="text-align:center;">re.S</td><td style="text-align:center;">使.匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center;">re.U</td><td style="text-align:center;">根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B</td></tr><tr><td style="text-align:center;">re.X</td><td style="text-align:center;">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><h2 id="特殊字符类" tabindex="-1"><a class="header-anchor" href="#特殊字符类" aria-hidden="true">#</a> 特殊字符类</h2><table><thead><tr><th style="text-align:center;">实例</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配除 &quot;\\n&quot; 之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用象 [.\\n] 的模式</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配一个数字字符。等价于 [0-9]</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配一个非数字字符。等价于 [^0-9]</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配任何非空白字符。等价于 [^\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配任何非单词字符。等价于 [^A-Za-z0-9_]</td></tr></tbody></table>`,6),l=[s];function d(c,i){return e(),n("div",null,l)}const p=t(r,[["render",d],["__file","regex.html.vue"]]);export{p as default};
