import{_ as t,p,q as e,s as n,R as o,t as c,Z as a,n as l}from"./framework-47a2e622.js";const r="/images/微信图片_20220901134606.png",i="/images/微信图片_20220901135322.png",u="/images/微信图片_20220901135534.png",k="/images/微信图片_20220901135742.png",d="/images/微信图片_20220901135911.png",g="/images/微信图片_20220901135951.png",h="/images/微信图片_20220901140350.png",m="/images/微信图片_20220901140459.png",_="/images/微信图片_20220901140619.png",y="/images/image-20220411140034618.png",w="/images/image-20220411140159888.png",x="/images/image-20220411140253368.png",b="/images/image-20220411140329279.png",f={},v=a('<h2 id="暴力破解" tabindex="-1"><a class="header-anchor" href="#暴力破解" aria-hidden="true">#</a> 暴力破解</h2><p><img src="'+r+'" alt=""></p><ul><li>sniper =&gt; 对单一变量进行一次破解。</li><li>battering ram =&gt; 对多变量同时进行破解。</li><li>pitchfork =&gt; 每一个变量标记对应一个字典，取每个字典的对应项，请求的数量取决于数量最少的字典。</li><li>cluster bomb =&gt; 每个变量对应一个字典，并且进行交集破解，尝试各种组合。</li></ul><h3 id="验证码爆破" tabindex="-1"><a class="header-anchor" href="#验证码爆破" aria-hidden="true">#</a> 验证码爆破</h3><p>使用插件：</p>',5),q={href:"https://github.com/f0ng/captcha-killer-modified",target:"_blank",rel:"noopener noreferrer"},A=a('<p>将获取验证码的 URL 发送至插件：</p><p><img src="'+i+'" alt=""></p><p>对数据包进行重放，尝试获取验证码：</p><p><img src="'+u+`" alt=""></p><p>在本地开启一个服务端：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> argparse
<span class="token keyword">import</span> ddddocr <span class="token comment"># 导入 ddddocr</span>
<span class="token keyword">from</span> aiohttp <span class="token keyword">import</span> web
<span class="token keyword">import</span> base64

parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-p&quot;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;http port&quot;</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">&quot;8888&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
ocr <span class="token operator">=</span> ddddocr<span class="token punctuation">.</span>DdddOcr<span class="token punctuation">(</span><span class="token punctuation">)</span>
port <span class="token operator">=</span> args<span class="token punctuation">.</span>p

auth_base64 <span class="token operator">=</span> <span class="token string">&quot;youzai&quot;</span> <span class="token comment"># 可自定义auth认证</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle_cb</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&#39;Basic &#39;</span> <span class="token operator">+</span> auth_base64<span class="token punctuation">:</span>
        <span class="token keyword">return</span> web<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">&#39;Forbidden&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token string">&#39;403&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> request<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    img_base64 <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>
    img_bytes <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>img_base64<span class="token punctuation">)</span>
    <span class="token keyword">return</span> web<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>text<span class="token operator">=</span>ocr<span class="token punctuation">.</span>classification<span class="token punctuation">(</span>img_bytes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

app <span class="token operator">=</span> web<span class="token punctuation">.</span>Application<span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>add_routes<span class="token punctuation">(</span><span class="token punctuation">[</span>
    web<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/reg&#39;</span><span class="token punctuation">,</span> handle_cb<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    web<span class="token punctuation">.</span>run_app<span class="token punctuation">(</span>app<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>
</code></pre></div><p><img src="`+k+`" alt=""></p><p>在验证码识别的接口中配置请求数据：</p><div class="language-http" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/reg</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0</span></span>
<span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span><span class="token header-value">Basic yozuai</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">8332</span></span>

&lt;@BASE64&gt;&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;&lt;/@BASE64&gt;
</code></pre></div><p>请求接口模板设置：</p><table><thead><tr><th style="text-align:center;">ID</th><th style="text-align:center;">标签</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;</td><td style="text-align:center;">代表验证码图片原二进制内容</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">&lt;@URLENCODE&gt;&lt;/@URLENCODE&gt;</td><td style="text-align:center;">对标签内的内容进行 URL 编码</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">&lt;@BASE64&gt;&lt;/@BASE64&gt;</td><td style="text-align:center;">对标签内的内容进行 base64 编码</td></tr></tbody></table><p><img src="`+d+'" alt=""></p><p>点击识别：</p><p><img src="'+g+'" alt=""></p><p>可以在右侧看到识别的结果。</p><p>将需要爆破的数据包发送至 <code>Intruder</code> 模块，将需要爆破的参数配置好：</p><p><img src="'+h+'" alt=""></p><p>其中，在验证码的 payload 中选择如下：</p><p><img src="'+m+'" alt=""></p><p>验证码自动完成识别并替换成 payload：</p><p><img src="'+_+'" alt=""></p>',21),E=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"提示"),n("p",null,"这种模式的验证码爆破比较适用于已知用户名，但是密码未知的情况，如果需要对用户名密码和验证码同时展开爆破，需要两个庞大的字典进行一一对应爆破。")],-1),R=a('<h3 id="token-爆破" tabindex="-1"><a class="header-anchor" href="#token-爆破" aria-hidden="true">#</a> Token 爆破</h3><p>首先将模式调整为 <code>Pitchfork</code>：</p><p><img src="'+y+'" alt=""></p><p>进入 <code>Grep - Extract</code>：</p><p><img src="'+w+'" alt=""></p><p>选定首尾的范围：</p><p><img src="'+x+'" alt=""></p><p>将线程数调整为 1：</p><p><img src="'+b+'" alt=""></p>',9);function z(B,I){const s=l("ExternalLinkIcon");return p(),e("div",null,[v,n("p",null,[n("a",q,[o("https://github.com/f0ng/captcha-killer-modified"),c(s)])]),A,E,R])}const M=t(f,[["render",z],["__file","burpSuite.html.vue"]]);export{M as default};
