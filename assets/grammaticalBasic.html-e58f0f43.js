import{_ as a,p as t,q as p,Y as s,s as n}from"./framework-cfcd8ab0.js";const o="/images/image_20221103103948.png",e={},c=s(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><blockquote><p>变量是用于存储信息的&quot;容器&quot;。</p></blockquote><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token variable">$z</span> <span class="token operator">=</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>变量规则：</p><ul><li>变量以 <strong>$</strong> 符号开始，后面跟着变量的名称。</li><li>变量名必须以字母或者下划线字符开始。</li><li>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）。</li><li>变量名不能包含空格。</li><li>变量名是区分大小写的（<em>$y</em> 和 <em>$Y</em> 是两个不同的变量）。</li></ul>`,5),l=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,"PHP 语句和 PHP 变量都是区分大小写的。")],-1),u=s(`<h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3><p>PHP 没有声明变量的命令，变量在第一次赋值给它的时候被创建：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">10.5</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul>`,6),i=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"作用域"),n("p",null,"在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。")],-1),r=s(`<p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span>

	<span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;p&gt;测试函数内变量:&lt;p&gt;&quot;</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;变量 x 为: <span class="token interpolation"><span class="token variable">$x</span></span>&quot;</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;变量 y 为: <span class="token interpolation"><span class="token variable">$y</span></span>&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 

	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;p&gt;测试函数外变量:&lt;p&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;变量 x 为: <span class="token interpolation"><span class="token variable">$x</span></span>&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;变量 y 为: <span class="token interpolation"><span class="token variable">$y</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h4 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> global</h4><p>global 关键字可以用于函数内访问全局变量：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token keyword">global</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
	    <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	 
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p><p>上面的示例可以写成：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;y&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;y&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	 
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h4 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> Static</h4><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候希望某个局部变量不要被删除。要做到这一点，请在您第一次声明变量时使用 static 关键字：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token keyword">static</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span>
	    <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token comment">// 换行符</span>
	<span class="token punctuation">}</span>
	 
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</p>`,12),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"该变量仍然是函数的局部变量")],-1),d=s(`<h4 id="parameter" tabindex="-1"><a class="header-anchor" href="#parameter" aria-hidden="true">#</a> parameter</h4><p>参数作用域：参数是通过调用代码将值传递给函数的局部变量。</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">myTest</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h2><blockquote><p>在 PHP 中有两个基本的输出方式：<code>echo</code>和<code>print</code>。</p></blockquote><p>echo 和 print 区别：</p><ul><li>echo =&gt; 可以输出一个或多个字符串</li><li>print =&gt; 只允许输出一个字符串，返回值总为 1</li></ul><h3 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h3>`,8),g=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"提示"),n("p",null,"echo 输出的速度比 print 快， echo 没有返回值，print 有返回值1。")],-1),h=s(`<div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello world!&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;我要学 PHP!&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;这是一个&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;字符串，&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;使用了&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;多个&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;参数。&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>echo 使用的时候可以加括号，也可以不加括号。</p><p>使用 echo 输出变量：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$txt1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;学习 PHP&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$txt2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;RUNOOB.COM&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">echo</span> <span class="token variable">$txt1</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;在 <span class="token interpolation"><span class="token variable">$txt2</span></span> 学习 PHP &quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;我车的品牌是 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h3><p>print 同样是一个语言结构，可以使用括号，也可以不使用括号。</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;Hello world!&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;我要学习 PHP!&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>使用 print 输出变量：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$txt1</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;学习 PHP&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$txt2</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;RUNOOB.COM&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">print</span> <span class="token variable">$txt1</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;在 <span class="token interpolation"><span class="token variable">$txt2</span></span> 学习 PHP &quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">print</span> <span class="token string double-quoted-string">&quot;我车的品牌是 <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h2 id="eof" tabindex="-1"><a class="header-anchor" href="#eof" aria-hidden="true">#</a> EOF</h2><blockquote><p>PHP EOF(heredoc)是一种在命令行shell（如 sh、csh、ksh、bash、PowerShell 和 zsh）和程序语言（像 Perl、PHP、Python 和 Ruby）里定义一个字符串的方法。</p></blockquote><p>使用方法：</p><ul><li>必须后接分号，否则编译通不过。</li><li>EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li><li><strong>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)</strong>。</li><li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li><li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与 q 和 qq 的用法。</li></ul><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  
	<span class="token keyword">echo</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>
	        &lt;h1&gt;我的第一个标题&lt;/h1&gt;  
	        &lt;p&gt;我的第一个段落。&lt;/p&gt;  
<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span>  
<span class="token comment">// 结束需要独立一行且前后不能空格  </span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div>`,14),q=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("ul",null,[n("li",null,"以 <<<EOF 开始标记开始，以 EOF 结束标记结束，结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号 。"),n("li",null,"开始标记和结束标记相同，比如常用大写的 EOT、EOD、EOF 来表示，但是不只限于那几个(也可以用：JSON、HTML 等)，只要保证开始标记和结束标记不在正文中出现即可。"),n("li",null,"位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在 heredoc 中，变量不需要用连接符 . 或 , 来拼接。")])],-1),b=s(`<div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;runoob&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$a</span><span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>
	        &quot;abc&quot;<span class="token interpolation"><span class="token variable">$name</span></span>
	        &quot;123&quot;
<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span>
	<span class="token comment">// 结束需要独立一行且前后不能空格</span>
	<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div>`,1),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"EOF 中是会解析 html 格式内容的，并且在双引号内的内容也有转义效果")],-1),v=s(`<div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$name</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;变量会被解析&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$a</span><span class="token operator">=</span><span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>
	<span class="token interpolation"><span class="token variable">$name</span></span>&lt;br&gt;&lt;a&gt;html格式会被解析&lt;/a&gt;&lt;br/&gt;双引号和Html格式外的其他内容都不会被解析
	&quot;双引号外所有被排列好的格式都会被保留&quot;
	&quot;但是双引号内会保留转义符的转义效果,比如table:\\t和换行：\\n下一行&quot;
<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span>
	<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p><img src="`+o+`" alt=""></p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>PHP 支持以下几种数据类型：</p><ul><li>String（字符串）</li><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>Array（数组）</li><li>Object（对象）</li><li>NULL（空值）</li><li>Resource（资源类型）</li></ul><p>PHP<code>var_dump()</code>函数返回变量的数据类型和值：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5985</span><span class="token punctuation">;</span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">345</span><span class="token punctuation">;</span> <span class="token comment">// 负数 </span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span> 
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0x8C</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制数</span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">047</span><span class="token punctuation">;</span> <span class="token comment">// 八进制数</span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
	<span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>在 PHP 中，对象必须声明，对象使用关键字<code>class</code>声明，然后我们在类中定义数据类型，然后在实例化的类中使用数据类型：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">class</span> <span class="token class-name-definition class-name">Car</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">var</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
		<span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;green&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">function</span> <span class="token function-definition function">what_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>关键字<code>this</code>就是指向当前对象实例的指针，不指向任何其他对象或类。</p><h3 id="资源类型" tabindex="-1"><a class="header-anchor" href="#资源类型" aria-hidden="true">#</a> 资源类型</h3><p>PHP 资源 resource 是一种特殊变量，保存了到外部资源的一个引用。常见资源数据类型有打开文件、数据库连接、图形画布区域等。使用<code>get_resource_type()</code>函数可以返回资源（resource）类型：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token function">get_resource_type</span><span class="token punctuation">(</span><span class="token class-name type-declaration">resource</span> <span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
</code></pre></div><p>此函数返回一个字符串，用于表示传递给它的 resource 的类型。如果参数不是合法的 resource，将产生错误。</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token function">get_resource_type</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token comment">// 打印：mysql link</span>
	
	<span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;foo&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token function">get_resource_type</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token comment">// 打印：file</span>
	
	<span class="token variable">$doc</span> <span class="token operator">=</span> <span class="token function">new_xmldoc</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token function">get_resource_type</span><span class="token punctuation">(</span><span class="token variable">$doc</span><span class="token operator">-&gt;</span><span class="token property">doc</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token comment">// 打印：domxml document</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h2 id="数组-1" tabindex="-1"><a class="header-anchor" href="#数组-1" aria-hidden="true">#</a> 数组</h2><h3 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组" aria-hidden="true">#</a> 创建数组</h3><p>在 PHP 中，使用<code>array()</code>函数用于创建数组：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token comment"># 自动分配 ID 键</span>
<span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 手动分配 ID 键</span>
<span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="获取长度" tabindex="-1"><a class="header-anchor" href="#获取长度" aria-hidden="true">#</a> 获取长度</h3><p><code>count()</code>函数用于返回数组的长度（元素的数量）：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组" aria-hidden="true">#</a> 遍历数组</h3><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$cars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Volvo&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;BMW&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Toyota&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$arrlength</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">&lt;</span> <span class="token variable">$arrlength</span><span class="token punctuation">;</span> <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token keyword">echo</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token variable">$x</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="关联数组" tabindex="-1"><a class="header-anchor" href="#关联数组" aria-hidden="true">#</a> 关联数组</h3><p>关联数组是分配给数组的指定的键的数组。</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token comment"># 创建关联数组第一种方式</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Peter&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;35&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Ben&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;37&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Joe&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;43&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 创建关联数组第二种方式</span>
<span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Peter&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;35&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Ben&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;37&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Joe&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;43&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>可以在脚本中使用该键：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Peter&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;35&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Ben&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;37&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Joe&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;43&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Peter is &quot;</span> <span class="token operator">.</span> <span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Peter&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot; years old.&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h4 id="遍历关联数组" tabindex="-1"><a class="header-anchor" href="#遍历关联数组" aria-hidden="true">#</a> 遍历关联数组</h4><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Peter&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;35&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Ben&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;37&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Joe&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;43&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 
	<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=&gt;</span> <span class="token variable">$x_value</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Key=&quot;</span> <span class="token operator">.</span> <span class="token variable">$x</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;, Value=&quot;</span> <span class="token operator">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span>
	    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h2 id="超级全局变量" tabindex="-1"><a class="header-anchor" href="#超级全局变量" aria-hidden="true">#</a> 超级全局变量</h2><blockquote><p>PHP 中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p></blockquote><ul><li>$GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><h2 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h2><blockquote><p>命名空间通过关键字 namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。</p></blockquote><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">namespace</span> <span class="token package">MyProject</span> <span class="token punctuation">{</span>
	    <span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
	    <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">namespace</span> <span class="token package">AnotherProject</span> <span class="token punctuation">{</span>
	    <span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
	    <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前。</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">declare</span><span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string single-quoted-string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义多个命名空间和不包含在命名空间中的代码</span>
	<span class="token keyword">namespace</span> <span class="token package">MyProject</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
		<span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">namespace</span> <span class="token punctuation">{</span> <span class="token comment">// 全局代码</span>
		<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">MyProject<span class="token punctuation">\\</span>connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token class-name class-name-fully-qualified static-context">MyProject<span class="token punctuation">\\</span>Connection</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="子命名空间" tabindex="-1"><a class="header-anchor" href="#子命名空间" aria-hidden="true">#</a> 子命名空间</h3><p>与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">namespace</span> <span class="token package">MyProject<span class="token punctuation">\\</span>Sub<span class="token punctuation">\\</span>Level</span><span class="token punctuation">;</span>  <span class="token comment">//声明分层次的单个命名空间</span>
	
	<span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
	<span class="token keyword">function</span> <span class="token function-definition function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div>`,45),y=[c,l,u,i,r,k,d,g,h,q,b,m,v];function w(x,f){return t(),p("div",null,y)}const _=a(e,[["render",w],["__file","grammaticalBasic.html.vue"]]);export{_ as default};
