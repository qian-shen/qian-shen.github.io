import{_ as i,p as t,q as c,s as e,R as o,t as d,Z as l,n as h}from"./framework-47a2e622.js";const r={},u=l('<h2 id="垂直越权" tabindex="-1"><a class="header-anchor" href="#垂直越权" aria-hidden="true">#</a> 垂直越权</h2><blockquote><p>任意的用户访问到不属于自己的业务功能。</p></blockquote><p>测试方法：</p><ul><li>使用不同权限的账号，直接修改<code>Cookie</code>值进行测试。</li></ul><h2 id="水平越权" tabindex="-1"><a class="header-anchor" href="#水平越权" aria-hidden="true">#</a> 水平越权</h2><blockquote><p>用户能够访问与他有相同功能的用户的资源。</p></blockquote><p>测试方法：</p><ul><li>抓包找出其中的参数值，尝试修改成不同的值，查看回显。</li></ul><h2 id="短信轰炸" tabindex="-1"><a class="header-anchor" href="#短信轰炸" aria-hidden="true">#</a> 短信轰炸</h2><blockquote><p>短时间内可以重复的发送大量的短信，对系统资源产生消耗。</p></blockquote><p>测试方法：</p>',11),n=e("li",null,"使用重放或者爆破模块进行数据包的重放操作。",-1),p={href:"https://github.com/TheKingOfDuck/burpFakeIP",target:"_blank",rel:"noopener noreferrer"},s=e("li",null,"加空格、任意字母、号码前面 +86 绕过。",-1),b=e("li",null,"xff 头伪造 ip 绕过。",-1),k=l('<h2 id="未授权访问" tabindex="-1"><a class="header-anchor" href="#未授权访问" aria-hidden="true">#</a> 未授权访问</h2><blockquote><p>用户在没有获取登陆权限或未授权的情况下就可以访问系统受限的资源或功能，例如重要的接口。</p></blockquote><p>测试方法：</p><ul><li>将所有数据包中的认证信息全部删除后进行重放，查看回显。</li></ul><h2 id="用户名枚举" tabindex="-1"><a class="header-anchor" href="#用户名枚举" aria-hidden="true">#</a> 用户名枚举</h2><blockquote><p>系统对用户输入的错误用户名和密码没有进行模糊提示，可能会导致用户名被枚举。</p></blockquote><p>测试方法：</p><ul><li>尝试输入错误的用户名和密码，查看回显，是否有类似“用户名错误”，“密码错误”等提示信息。</li><li>账号后加空格绕过账号错误次数限制。</li></ul><h2 id="验证码问题" tabindex="-1"><a class="header-anchor" href="#验证码问题" aria-hidden="true">#</a> 验证码问题</h2><p>（1）验证码可预测</p><p>测试方法：</p><ul><li>将数据包发送之后查看返回包是否带有验证码回显。</li></ul><p>（2）验证码绕过</p><p>测试方法：</p><ul><li>抓包将验证码替换成<code>0000</code>或者<code>1111</code>等特殊的号码，查看回显。</li><li>将验证码删除后，重放数据包，查看回显。</li><li>将验证码置空，重放数据包，查看回显。</li></ul><p>（3）验证码可重放</p><p>测试方法：</p><ul><li>抓包并使用相同的验证码，查看回显。</li></ul><p>（4）验证码暴力破解</p><p>测试方法：</p><ul><li>先测试验证码是否可以重放，如果可以，并且验证码是四位或五位，尝试使用暴力破解。</li></ul><h2 id="登陆认证绕过" tabindex="-1"><a class="header-anchor" href="#登陆认证绕过" aria-hidden="true">#</a> 登陆认证绕过</h2><blockquote><p>系统仅对登陆做了前端校验，没有在后端进行身份认证。</p></blockquote><p>测试方法：</p><ul><li>登陆后抓取返回包，尝试修改返回包中的字段值，如<code>{&quot;code&quot;:&quot;1&quot;}</code>等。</li></ul><h2 id="密码重置" tabindex="-1"><a class="header-anchor" href="#密码重置" aria-hidden="true">#</a> 密码重置</h2><blockquote><p>在得知其他用户名账号的时候，通过修改请求的返回值达到欺骗服务器的目的。</p></blockquote><p>测试方法：</p><ul><li>尝试修改返回包的数据，如<code>{&quot;code&quot;:&quot;1&quot;}</code>或者<code>{&quot;status&quot;:1}</code>等。</li></ul><h2 id="sso-认证缺陷" tabindex="-1"><a class="header-anchor" href="#sso-认证缺陷" aria-hidden="true">#</a> SSO 认证缺陷</h2><blockquote><p>服务器对 Cookie 和 Session 等参数过于简单。</p></blockquote><p>测试方法：</p><ul><li>账号登陆过程中，尝试修改<code>Cookie</code>或者<code>Session</code>中明显参数的值。</li></ul><h2 id="空口令" tabindex="-1"><a class="header-anchor" href="#空口令" aria-hidden="true">#</a> 空口令</h2><p>测试方法：</p><ul><li>在登陆的时候将账号和密码均设置为空。</li></ul><h2 id="会话固定" tabindex="-1"><a class="header-anchor" href="#会话固定" aria-hidden="true">#</a> 会话固定</h2><blockquote><p>在用户未登录的时候就已经产生了一个 Session，用户输入信息登陆后，Session 信息没有进行重新修改，依旧使用了之前的 Session。</p></blockquote><p>测试方法：</p><ul><li>在登陆前和登陆后分别将<code>Session</code>记录下来，进行对比。</li></ul><h2 id="会话未及时销毁" tabindex="-1"><a class="header-anchor" href="#会话未及时销毁" aria-hidden="true">#</a> 会话未及时销毁</h2><blockquote><p>用户退出系统后，服务端的 Session 未失效。</p></blockquote><p>测试方法：</p><ul><li>尝试退出系统，在退出系统后回退，查看是否可以返回到还在登陆的页面。</li></ul><h2 id="重放攻击" tabindex="-1"><a class="header-anchor" href="#重放攻击" aria-hidden="true">#</a> 重放攻击</h2><blockquote><p>服务端没有对关键业务操作进行唯一标识。</p></blockquote><p>测试方法：</p><ul><li>对某些功能抓包后进行数据包的重放，查看是否成功执行相应操作，如重复注册账号等。</li></ul><h2 id="图片地址可控" tabindex="-1"><a class="header-anchor" href="#图片地址可控" aria-hidden="true">#</a> 图片地址可控</h2><blockquote><p>图片的地址可以由前端修改。</p></blockquote><p>测试方法：</p><ul><li>抓包后修改图片的地址，之后点击该图片，查看是否会跳转至其他页面。</li></ul><h2 id="搜索字段参数为空" tabindex="-1"><a class="header-anchor" href="#搜索字段参数为空" aria-hidden="true">#</a> 搜索字段参数为空</h2><blockquote><p>在搜索框中，只是做了前端限制搜索的内容不能为空。</p></blockquote><p>测试方法：</p><ul><li>抓包后将搜索的内容置空，查看是否会返回所有的内容。</li></ul>',56);function q(f,_){const a=h("ExternalLinkIcon");return t(),c("div",null,[u,e("ul",null,[n,e("li",null,[o("修改 xff 头绕过，burp 插件 "),e("a",p,[o("https://github.com/TheKingOfDuck/burpFakeIP"),d(a)])]),s,b]),k])}const m=i(r,[["render",q],["__file","logicalVulnerability.html.vue"]]);export{m as default};
