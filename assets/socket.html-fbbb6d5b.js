import{_ as e,p as c,q as l,s as n,t as a,a3 as t,R as p,Z as o,n as u}from"./framework-47a2e622.js";const k={},i=o(`<h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><p>Socket 又称&quot;套接字&quot;，应用程序通常通过&quot;套接字&quot;向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>Python 中，我们用<code>socket()</code>函数来创建套接字，语法格式如下：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">[</span>family<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">[</span><span class="token punctuation">,</span> proto<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>参数：</p><ul><li>family: 套接字家族可以使 AF_UNIX 或者 AF_INET。</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code>。</li><li>protocol: 一般不填默认为 0。</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2>`,8),r=n("thead",null,[n("tr",null,[n("th",null,"函数"),n("th",null,"描述")])],-1),d=n("td",null,null,-1),m=n("tr",null,[n("td",null,"s.bind()"),n("td",null,"绑定地址（host,port）到套接字， 在 AF_INET 下,以元组（host,port）的形式表示地址")],-1),h=n("tr",null,[n("td",null,"s.listen()"),n("td",null,"开始 TCP 监听。backlog 指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为 1，大部分应用程序设为 5 就可以了")],-1),_=n("tr",null,[n("td",null,"s.accept()"),n("td",null,"被动接受 TCP 客户端连接,(阻塞式)等待连接的到来")],-1),g=n("td",null,null,-1),y=n("tr",null,[n("td",null,"s.connect()"),n("td",null,"主动初始化 TCP 服务器连接，。一般 address 的格式为元组（hostname,port），如果连接出错，返回 socket.error 错误")],-1),f=n("tr",null,[n("td",null,"s.connect_ex()"),n("td",null,"connect() 函数的扩展版本,出错时返回出错码,而不是抛出异常")],-1),b=n("td",null,null,-1),w=n("tr",null,[n("td",null,"s.recv()"),n("td",null,"接收 TCP 数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag 提供有关消息的其他信息，通常可以忽略")],-1),v=n("tr",null,[n("td",null,"s.send()"),n("td",null,"发送 TCP 数据，将 string 中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于 string 的字节大小")],-1),q=n("tr",null,[n("td",null,"s.sendall()"),n("td",null,"完整发送 TCP 数据，完整发送 TCP 数据。将 string 中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常")],-1),T=n("tr",null,[n("td",null,"s.recvfrom()"),n("td",null,"接收 UDP 数据，与 recv() 类似，但返回值是（data,address）。其中 data 是包含接收数据的字符串，address 是发送数据的套接字地址")],-1),P=n("tr",null,[n("td",null,"s.sendto()"),n("td",null,"发送 UDP 数据，将数据发送到套接字，address 是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数")],-1),x=n("tr",null,[n("td",null,"s.close()"),n("td",null,"关闭套接字")],-1),C=n("tr",null,[n("td",null,"s.getpeername()"),n("td",null,"返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）")],-1),S=n("tr",null,[n("td",null,"s.getsockname()"),n("td",null,"返回套接字自己的地址。通常是一个元组(ipaddr,port)")],-1),N=n("tr",null,[n("td",null,"s.setsockopt(level,optname,value)"),n("td",null,"设置给定套接字选项的值")],-1),A=n("tr",null,[n("td",null,"s.settimeout(timeout)"),n("td",null,"设置套接字操作的超时期，timeout 是一个浮点数，单位是秒。值为 None 表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 connect()）")],-1),I=n("tr",null,[n("td",null,"s.gettimeout()"),n("td",null,"返回当前超时期的值，单位是秒，如果没有设置超时期，则返回 None")],-1),E=n("tr",null,[n("td",null,"s.fileno()"),n("td",null,"返回套接字的文件描述符")],-1),D=n("tr",null,[n("td",null,"s.setblocking(flag)"),n("td",null,"如果 flag 为 0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用 recv() 没有发现任何数据，或 send() 调用无法立即发送数据，那么将引起 socket.error 异常")],-1),F=n("tr",null,[n("td",null,"s.makefile()"),n("td",null,"创建一个与该套接字相关连的文件")],-1),R=o(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><p>服务端：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python3</span>
<span class="token comment"># 文件名：server.py</span>
<span class="token comment"># 导入 socket 模块</span>
<span class="token keyword">import</span> socket
serversocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 创建socket对象</span>
host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment"># 获取本地主机名</span>
port <span class="token operator">=</span> <span class="token number">9999</span>
serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 绑定端口</span>
serversocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>	<span class="token comment"># 设置最大连接数，超过后排队</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
	clientsocket<span class="token punctuation">,</span>addr <span class="token operator">=</span> serversocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 建立客户端连接</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;连接地址: %s&quot;</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
	msg<span class="token operator">=</span><span class="token string">&#39;欢迎访问W3Cschool教程！&#39;</span><span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span>
	clientsocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>客户端：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python3</span>
<span class="token comment"># 文件名：client.py</span>
<span class="token comment"># 导入 socket 模块</span>
<span class="token keyword">import</span> socket
s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 创建 socket 对象</span>
host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取本地主机名</span>
port <span class="token operator">=</span> <span class="token number">9999</span>	<span class="token comment"># 设置端口好</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment"># 连接服务，指定主机和端口</span>
msg <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>	<span class="token comment"># 接收小于 1024 字节的数据</span>
s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="实现简单的聊天功能" tabindex="-1"><a class="header-anchor" href="#实现简单的聊天功能" aria-hidden="true">#</a> 实现简单的聊天功能</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务端（Server.py）</span>
<span class="token keyword">import</span> socket
<span class="token keyword">def</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    serversocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  <span class="token comment"># 创建socket对象</span>
    host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取本地主机名</span>
    port <span class="token operator">=</span> <span class="token number">9999</span>
    serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 绑定端口</span>
    serversocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 设置最大连接数，超过后排队</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        clientsocket<span class="token punctuation">,</span> addr <span class="token operator">=</span> serversocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 建立客户端连接</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;小明说：&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">&quot;结束对话&quot;</span><span class="token punctuation">:</span>
                clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;链接已断开&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                clientsocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            msg_return <span class="token operator">=</span> clientsocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> msg_return<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;小光说：&quot;</span><span class="token punctuation">,</span> msg_return<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;链接已断开&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;连接已断开&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    server<span class="token punctuation">(</span><span class="token punctuation">)</span>
	
<span class="token comment"># 客户端（Client.py）</span>
<span class="token keyword">import</span> socket
<span class="token keyword">def</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  <span class="token comment"># 创建 socket 对象</span>
    host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取本地主机名</span>
    port <span class="token operator">=</span> <span class="token number">9999</span>  <span class="token comment"># 设置端口好</span>
    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 连接服务，指定主机和端口</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            msg <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 接收小于 1024 字节的数据</span>
            <span class="token keyword">if</span> msg<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;小光说：&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;链接已断开&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            msg_return <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;小明说：&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> msg_return <span class="token operator">==</span> <span class="token string">&quot;结束对话&quot;</span><span class="token punctuation">:</span>
                s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;链接已断开&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg_return<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;链接已断开&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    client<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="socket-中-tcp-和-udp-区别" tabindex="-1"><a class="header-anchor" href="#socket-中-tcp-和-udp-区别" aria-hidden="true">#</a> Socket 中 TCP 和 UDP 区别</h2><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h3><p>服务器端一般步骤：</p><ol><li>创建一个socket，用函数socket()；</li><li>设置socket属性，用函数setsockopt(); * 可选</li><li>绑定IP地址、端口等信息到socket上，用函数bind();</li><li>开启监听，用函数listen()；</li><li>接收客户端上来的连接，用函数accept()；</li><li>收发数据，用函数send()和recv()，或者read()和write();</li><li>关闭网络连接；</li><li>关闭监听；</li></ol><p>客户端一般步骤：</p><ol><li>创建一个socket，用函数socket()；</li><li>设置socket属性，用函数setsockopt();* 可选</li><li>绑定IP地址、端口等信息到socket上，用函数bind();* 可选</li><li>设置要连接的对方的IP地址和端口等属性；</li><li>连接服务器，用函数connect()；</li><li>收发数据，用函数send()和recv()，或者read()和write();</li><li>关闭网络连接；</li></ol><h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h3><p>UDP编程的服务器端一般步骤：</p><ol><li>创建一个socket，用函数socket()；</li><li>设置socket属性，用函数setsockopt();* 可选</li><li>绑定IP地址、端口等信息到socket上，用函数bind();</li><li>循环接收数据，用函数recvfrom();</li><li>关闭网络连接；</li></ol><p>UDP编程的客户端一般步骤：</p><ol><li>创建一个socket，用函数socket()；</li><li>设置socket属性，用函数setsockopt();* 可选</li><li>绑定IP地址、端口等信息到socket上，用函数bind();* 可选</li><li>设置对方的IP地址和端口等属性;</li><li>发送数据，用函数sendto();</li><li>关闭网络连接；</li></ol>`,18);function U(K,M){const s=u("font");return c(),l("div",null,[i,n("table",null,[r,n("tbody",null,[n("tr",null,[n("td",null,[a(s,{color:"red"},{default:t(()=>[p("服务端套接字")]),_:1})]),d]),m,h,_,n("tr",null,[n("td",null,[a(s,{color:"blue"},{default:t(()=>[p("客户端套接字")]),_:1})]),g]),y,f,n("tr",null,[n("td",null,[a(s,{color:"orange"},{default:t(()=>[p("公共用途的套接字函数")]),_:1})]),b]),w,v,q,T,P,x,C,S,N,A,I,E,D,F])]),R])}const V=e(k,[["render",U],["__file","socket.html.vue"]]);export{V as default};
