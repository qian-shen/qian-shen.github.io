import{_ as n,p as s,q as a,Z as t}from"./framework-6ecfbe9e.js";const p={},o=t(`<h2 id="md5-值" tabindex="-1"><a class="header-anchor" href="#md5-值" aria-hidden="true">#</a> MD5 值</h2><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;crypto/md5&quot;</span>

str <span class="token operator">:=</span> <span class="token string">&quot;123456&quot;</span>  
data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  
has <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  
md5str1 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> has<span class="token punctuation">)</span> <span class="token comment">//将 []byte 转成16进制。</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>md5str1<span class="token punctuation">)</span>
</code></pre></div><h2 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数" aria-hidden="true">#</a> 随机数</h2><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;math/rand&quot;</span>
rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
t <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>  
str <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>  
authStr <span class="token operator">:=</span> str<span class="token operator">+</span><span class="token string">&quot;%#&quot;</span>  
fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>authStr<span class="token punctuation">)</span>
</code></pre></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;regexp&quot;</span>
data <span class="token operator">:=</span> <span class="token string">&quot;abcd&quot;</span>
reg <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">&quot;ab(.*?)d&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> reg <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;MustCompile err&quot;</span><span class="token punctuation">)</span>  
   <span class="token keyword">return</span>  
<span class="token punctuation">}</span>
results <span class="token operator">:=</span> reg<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 获取子表达式。</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>result <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">{</span>  
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;结果是&quot;</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>

<span class="token comment">// 字符串切割。</span>
s <span class="token operator">:=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 获取子表达式。</span>
a <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 以&quot;, &quot;作为分割点。</span>
fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="json-解析" tabindex="-1"><a class="header-anchor" href="#json-解析" aria-hidden="true">#</a> JSON 解析</h2><div class="language-go" data-ext="go"><pre class="language-go"><code>request<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> URL<span class="token operator">+</span>configURL<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,8),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","encode.html.vue"]]);export{k as default};
